{"ast":null,"code":"import { TRANSLOCO_CONFIG, TRANSLOCO_LOADER, translocoConfig, TranslocoModule, TranslocoService } from '@ngneat/transloco';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { TranslocoHttpLoader } from 'app/core/transloco/transloco.http-loader';\nimport * as i0 from \"@angular/core\";\nclass TranslocoCoreModule {\n  static #_ = this.ɵfac = function TranslocoCoreModule_Factory(t) {\n    return new (t || TranslocoCoreModule)();\n  };\n  static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: TranslocoCoreModule\n  });\n  static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      // Provide the default Transloco configuration\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: [{\n          id: 'en',\n          label: 'English'\n        }, {\n          id: 'tr',\n          label: 'Turkish'\n        }],\n        defaultLang: 'en',\n        fallbackLang: 'en',\n        reRenderOnLangChange: true,\n        prodMode: true\n      })\n    }, {\n      // Provide the default Transloco loader\n      provide: TRANSLOCO_LOADER,\n      useClass: TranslocoHttpLoader\n    }, {\n      // Preload the default language before the app starts to prevent empty/jumping content\n      provide: APP_INITIALIZER,\n      deps: [TranslocoService],\n      useFactory: translocoService => () => {\n        const defaultLang = translocoService.getDefaultLang();\n        translocoService.setActiveLang(defaultLang);\n        return translocoService.load(defaultLang).toPromise();\n      },\n      multi: true\n    }],\n    imports: [TranslocoModule]\n  });\n}\nexport { TranslocoCoreModule };\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TranslocoCoreModule, {\n    exports: [TranslocoModule]\n  });\n})();","map":{"version":3,"names":["TRANSLOCO_CONFIG","TRANSLOCO_LOADER","translocoConfig","TranslocoModule","TranslocoService","APP_INITIALIZER","TranslocoHttpLoader","TranslocoCoreModule","_","_2","_3","provide","useValue","availableLangs","id","label","defaultLang","fallbackLang","reRenderOnLangChange","prodMode","useClass","deps","useFactory","translocoService","getDefaultLang","setActiveLang","load","toPromise","multi","imports","exports"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\core\\transloco\\transloco.module.ts"],"sourcesContent":["import { Translation, TRANSLOCO_CONFIG, TRANSLOCO_LOADER, translocoConfig, TranslocoModule, TranslocoService } from '@ngneat/transloco';\r\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { TranslocoHttpLoader } from 'app/core/transloco/transloco.http-loader';\r\n\r\n@NgModule({\r\n    exports  : [\r\n        TranslocoModule\r\n    ],\r\n    providers: [\r\n        {\r\n            // Provide the default Transloco configuration\r\n            provide : TRANSLOCO_CONFIG,\r\n            useValue: translocoConfig({\r\n                availableLangs      : [\r\n                    {\r\n                        id   : 'en',\r\n                        label: 'English'\r\n                    },\r\n                    {\r\n                        id   : 'tr',\r\n                        label: 'Turkish'\r\n                    }\r\n                ],\r\n                defaultLang         : 'en',\r\n                fallbackLang        : 'en',\r\n                reRenderOnLangChange: true,\r\n                prodMode            : true\r\n            })\r\n        },\r\n        {\r\n            // Provide the default Transloco loader\r\n            provide : TRANSLOCO_LOADER,\r\n            useClass: TranslocoHttpLoader\r\n        },\r\n        {\r\n            // Preload the default language before the app starts to prevent empty/jumping content\r\n            provide   : APP_INITIALIZER,\r\n            deps      : [TranslocoService],\r\n            useFactory: (translocoService: TranslocoService): any => (): Promise<Translation> => {\r\n                const defaultLang = translocoService.getDefaultLang();\r\n                translocoService.setActiveLang(defaultLang);\r\n                return translocoService.load(defaultLang).toPromise();\r\n            },\r\n            multi     : true\r\n        }\r\n    ]\r\n})\r\nexport class TranslocoCoreModule\r\n{\r\n}\r\n"],"mappings":"AAAA,SAAsBA,gBAAgB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,mBAAmB;AACvI,SAASC,eAAe,QAAkB,eAAe;AACzD,SAASC,mBAAmB,QAAQ,0CAA0C;;AAE9E,MA2CaC,mBAAmB;EAAA,QAAAC,CAAA,G;qBAAnBD,mBAAmB;EAAA;EAAA,QAAAE,EAAA,G;UAAnBF;EAAmB;EAAA,QAAAG,EAAA,G;eAvCjB,CACP;MACI;MACAC,OAAO,EAAGX,gBAAgB;MAC1BY,QAAQ,EAAEV,eAAe,CAAC;QACtBW,cAAc,EAAQ,CAClB;UACIC,EAAE,EAAK,IAAI;UACXC,KAAK,EAAE;SACV,EACD;UACID,EAAE,EAAK,IAAI;UACXC,KAAK,EAAE;SACV,CACJ;QACDC,WAAW,EAAW,IAAI;QAC1BC,YAAY,EAAU,IAAI;QAC1BC,oBAAoB,EAAE,IAAI;QAC1BC,QAAQ,EAAc;OACzB;KACJ,EACD;MACI;MACAR,OAAO,EAAGV,gBAAgB;MAC1BmB,QAAQ,EAAEd;KACb,EACD;MACI;MACAK,OAAO,EAAKN,eAAe;MAC3BgB,IAAI,EAAQ,CAACjB,gBAAgB,CAAC;MAC9BkB,UAAU,EAAGC,gBAAkC,IAAU,MAA2B;QAChF,MAAMP,WAAW,GAAGO,gBAAgB,CAACC,cAAc,EAAE;QACrDD,gBAAgB,CAACE,aAAa,CAACT,WAAW,CAAC;QAC3C,OAAOO,gBAAgB,CAACG,IAAI,CAACV,WAAW,CAAC,CAACW,SAAS,EAAE;MACzD,CAAC;MACDC,KAAK,EAAO;KACf,CACJ;IAAAC,OAAA,GAvCG1B,eAAe;EAAA;;SAyCVI,mBAAmB;;2EAAnBA,mBAAmB;IAAAuB,OAAA,GAzCxB3B,eAAe;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}