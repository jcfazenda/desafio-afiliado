{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass FuseNavigationService {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this._componentRegistry = new Map();\n    this._navigationStore = new Map();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register navigation component\n   *\n   * @param name\n   * @param component\n   */\n  registerComponent(name, component) {\n    this._componentRegistry.set(name, component);\n  }\n  /**\n   * Deregister navigation component\n   *\n   * @param name\n   */\n  deregisterComponent(name) {\n    this._componentRegistry.delete(name);\n  }\n  /**\n   * Get navigation component from the registry\n   *\n   * @param name\n   */\n  getComponent(name) {\n    return this._componentRegistry.get(name);\n  }\n  /**\n   * Store the given navigation with the given key\n   *\n   * @param key\n   * @param navigation\n   */\n  storeNavigation(key, navigation) {\n    // Add to the store\n    this._navigationStore.set(key, navigation);\n  }\n  /**\n   * Get navigation from storage by key\n   *\n   * @param key\n   */\n  getNavigation(key) {\n    return this._navigationStore.get(key) ?? [];\n  }\n  /**\n   * Delete the navigation from the storage\n   *\n   * @param key\n   */\n  deleteNavigation(key) {\n    // Check if the navigation exists\n    if (!this._navigationStore.has(key)) {\n      console.warn(`Navigation with the key '${key}' does not exist in the store.`);\n    }\n    // Delete from the storage\n    this._navigationStore.delete(key);\n  }\n  /**\n   * Utility function that returns a flattened\n   * version of the given navigation array\n   *\n   * @param navigation\n   * @param flatNavigation\n   */\n  getFlatNavigation(navigation, flatNavigation = []) {\n    for (const item of navigation) {\n      if (item.type === 'basic') {\n        flatNavigation.push(item);\n        continue;\n      }\n      if (item.type === 'aside' || item.type === 'collapsable' || item.type === 'group') {\n        if (item.children) {\n          this.getFlatNavigation(item.children, flatNavigation);\n        }\n      }\n    }\n    return flatNavigation;\n  }\n  /**\n   * Utility function that returns the item\n   * with the given id from given navigation\n   *\n   * @param id\n   * @param navigation\n   */\n  getItem(id, navigation) {\n    for (const item of navigation) {\n      if (item.id === id) {\n        return item;\n      }\n      if (item.children) {\n        const childItem = this.getItem(id, item.children);\n        if (childItem) {\n          return childItem;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Utility function that returns the item's parent\n   * with the given id from given navigation\n   *\n   * @param id\n   * @param navigation\n   * @param parent\n   */\n  getItemParent(id, navigation, parent) {\n    for (const item of navigation) {\n      if (item.id === id) {\n        return parent;\n      }\n      if (item.children) {\n        const childItem = this.getItemParent(id, item.children, item);\n        if (childItem) {\n          return childItem;\n        }\n      }\n    }\n    return null;\n  }\n  static #_ = this.ɵfac = function FuseNavigationService_Factory(t) {\n    return new (t || FuseNavigationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseNavigationService,\n    factory: FuseNavigationService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FuseNavigationService };","map":{"version":3,"names":["FuseNavigationService","constructor","_componentRegistry","Map","_navigationStore","registerComponent","name","component","set","deregisterComponent","delete","getComponent","get","storeNavigation","key","navigation","getNavigation","deleteNavigation","has","console","warn","getFlatNavigation","flatNavigation","item","type","push","children","getItem","id","childItem","getItemParent","parent","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\@fuse\\components\\navigation\\navigation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FuseNavigationItem } from '@fuse/components/navigation/navigation.types';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuseNavigationService\r\n{\r\n    private _componentRegistry: Map<string, any> = new Map<string, any>();\r\n    private _navigationStore: Map<string, FuseNavigationItem[]> = new Map<string, any>();\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register navigation component\r\n     *\r\n     * @param name\r\n     * @param component\r\n     */\r\n    registerComponent(name: string, component: any): void\r\n    {\r\n        this._componentRegistry.set(name, component);\r\n    }\r\n\r\n    /**\r\n     * Deregister navigation component\r\n     *\r\n     * @param name\r\n     */\r\n    deregisterComponent(name: string): void\r\n    {\r\n        this._componentRegistry.delete(name);\r\n    }\r\n\r\n    /**\r\n     * Get navigation component from the registry\r\n     *\r\n     * @param name\r\n     */\r\n    getComponent<T>(name: string): T\r\n    {\r\n        return this._componentRegistry.get(name);\r\n    }\r\n\r\n    /**\r\n     * Store the given navigation with the given key\r\n     *\r\n     * @param key\r\n     * @param navigation\r\n     */\r\n    storeNavigation(key: string, navigation: FuseNavigationItem[]): void\r\n    {\r\n        // Add to the store\r\n        this._navigationStore.set(key, navigation);\r\n    }\r\n\r\n    /**\r\n     * Get navigation from storage by key\r\n     *\r\n     * @param key\r\n     */\r\n    getNavigation(key: string): FuseNavigationItem[]\r\n    {\r\n        return this._navigationStore.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Delete the navigation from the storage\r\n     *\r\n     * @param key\r\n     */\r\n    deleteNavigation(key: string): void\r\n    {\r\n        // Check if the navigation exists\r\n        if ( !this._navigationStore.has(key) )\r\n        {\r\n            console.warn(`Navigation with the key '${key}' does not exist in the store.`);\r\n        }\r\n\r\n        // Delete from the storage\r\n        this._navigationStore.delete(key);\r\n    }\r\n\r\n    /**\r\n     * Utility function that returns a flattened\r\n     * version of the given navigation array\r\n     *\r\n     * @param navigation\r\n     * @param flatNavigation\r\n     */\r\n    getFlatNavigation(navigation: FuseNavigationItem[], flatNavigation: FuseNavigationItem[] = []): FuseNavigationItem[]\r\n    {\r\n        for ( const item of navigation )\r\n        {\r\n            if ( item.type === 'basic' )\r\n            {\r\n                flatNavigation.push(item);\r\n                continue;\r\n            }\r\n\r\n            if ( item.type === 'aside' || item.type === 'collapsable' || item.type === 'group' )\r\n            {\r\n                if ( item.children )\r\n                {\r\n                    this.getFlatNavigation(item.children, flatNavigation);\r\n                }\r\n            }\r\n        }\r\n\r\n        return flatNavigation;\r\n    }\r\n\r\n    /**\r\n     * Utility function that returns the item\r\n     * with the given id from given navigation\r\n     *\r\n     * @param id\r\n     * @param navigation\r\n     */\r\n    getItem(id: string, navigation: FuseNavigationItem[]): FuseNavigationItem | null\r\n    {\r\n        for ( const item of navigation )\r\n        {\r\n            if ( item.id === id )\r\n            {\r\n                return item;\r\n            }\r\n\r\n            if ( item.children )\r\n            {\r\n                const childItem = this.getItem(id, item.children);\r\n\r\n                if ( childItem )\r\n                {\r\n                    return childItem;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Utility function that returns the item's parent\r\n     * with the given id from given navigation\r\n     *\r\n     * @param id\r\n     * @param navigation\r\n     * @param parent\r\n     */\r\n    getItemParent(\r\n        id: string,\r\n        navigation: FuseNavigationItem[],\r\n        parent: FuseNavigationItem[] | FuseNavigationItem\r\n    ): FuseNavigationItem[] | FuseNavigationItem | null\r\n    {\r\n        for ( const item of navigation )\r\n        {\r\n            if ( item.id === id )\r\n            {\r\n                return parent;\r\n            }\r\n\r\n            if ( item.children )\r\n            {\r\n                const childItem = this.getItemParent(id, item.children, item);\r\n\r\n                if ( childItem )\r\n                {\r\n                    return childItem;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}