{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  /**\n   * Constructor\n   */\n  constructor(_authService, _router) {\n    this._authService = _authService;\n    this._router = _router;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Can match\n   *\n   * @param route\n   * @param segments\n   */\n  canMatch(route, segments) {\n    return this._check(segments);\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Check the authenticated status\n   *\n   * @param segments\n   * @private\n   */\n  _check(segments) {\n    // Check the authentication status\n    return this._authService.check().pipe(switchMap(authenticated => {\n      // If the user is not authenticated...\n      if (!authenticated) {\n        // Redirect to the sign-in page with a redirectUrl param\n        const redirectURL = `/${segments.join('/')}`;\n        const urlTree = this._router.parseUrl(`sign-in?redirectURL=${redirectURL}`);\n        return of(urlTree);\n      }\n      // Allow the access\n      return of(true);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGuard };","map":{"version":3,"names":["of","switchMap","AuthGuard","constructor","_authService","_router","canMatch","route","segments","_check","check","pipe","authenticated","redirectURL","join","urlTree","parseUrl","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\core\\auth\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanMatch, Route, Router, UrlSegment, UrlTree } from '@angular/router';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { AuthService } from 'app/core/auth/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanMatch\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _authService: AuthService,\r\n        private _router: Router\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Can match\r\n     *\r\n     * @param route\r\n     * @param segments\r\n     */\r\n    canMatch(route: Route, segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree\r\n    {\r\n        return this._check(segments);\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Check the authenticated status\r\n     *\r\n     * @param segments\r\n     * @private\r\n     */\r\n    private _check(segments: UrlSegment[]): Observable<boolean | UrlTree>\r\n    {\r\n        // Check the authentication status\r\n        return this._authService.check().pipe(\r\n            switchMap((authenticated) => {\r\n\r\n                // If the user is not authenticated...\r\n                if ( !authenticated )\r\n                {\r\n                    // Redirect to the sign-in page with a redirectUrl param\r\n                    const redirectURL = `/${segments.join('/')}`;\r\n                    const urlTree = this._router.parseUrl(`sign-in?redirectURL=${redirectURL}`);\r\n\r\n                    return of(urlTree);\r\n                }\r\n\r\n                // Allow the access\r\n                return of(true);\r\n            })\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;;AAGhD,MAGaC,SAAS;EAElB;;;EAGAC,YACYC,YAAyB,EACzBC,OAAe;IADf,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,OAAO,GAAPA,OAAO;EAGnB;EAEA;EACA;EACA;EAEA;;;;;;EAMAC,QAAQA,CAACC,KAAY,EAAEC,QAAsB;IAEzC,OAAO,IAAI,CAACC,MAAM,CAACD,QAAQ,CAAC;EAChC;EAEA;EACA;EACA;EAEA;;;;;;EAMQC,MAAMA,CAACD,QAAsB;IAEjC;IACA,OAAO,IAAI,CAACJ,YAAY,CAACM,KAAK,EAAE,CAACC,IAAI,CACjCV,SAAS,CAAEW,aAAa,IAAI;MAExB;MACA,IAAK,CAACA,aAAa,EACnB;QACI;QACA,MAAMC,WAAW,GAAG,IAAIL,QAAQ,CAACM,IAAI,CAAC,GAAG,CAAC,EAAE;QAC5C,MAAMC,OAAO,GAAG,IAAI,CAACV,OAAO,CAACW,QAAQ,CAAC,uBAAuBH,WAAW,EAAE,CAAC;QAE3E,OAAOb,EAAE,CAACe,OAAO,CAAC;;MAGtB;MACA,OAAOf,EAAE,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC,CACL;EACL;EAAC,QAAAiB,CAAA,G;qBAzDQf,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATtB,SAAS;IAAAuB,OAAA,EAATvB,SAAS,CAAAwB,IAAA;IAAAC,UAAA,EAFN;EAAM;;SAETzB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}