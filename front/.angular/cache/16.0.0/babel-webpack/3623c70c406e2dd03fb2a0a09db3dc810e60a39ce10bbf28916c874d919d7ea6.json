{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { messages as messagesData } from 'app/mock-api/common/messages/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nclass MessagesMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._messages = messagesData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Messages - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/messages').reply(() => [200, cloneDeep(this._messages)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Messages - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/messages').reply(({\n      request\n    }) => {\n      // Get the message\n      const newMessage = cloneDeep(request.body.message);\n      // Generate a new GUID\n      newMessage.id = FuseMockApiUtils.guid();\n      // Unshift the new message\n      this._messages.unshift(newMessage);\n      // Return the response\n      return [200, newMessage];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Messages - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/common/messages').reply(({\n      request\n    }) => {\n      // Get the id and message\n      const id = request.body.id;\n      const message = cloneDeep(request.body.message);\n      // Prepare the updated message\n      let updatedMessage = null;\n      // Find the message and update it\n      this._messages.forEach((item, index, messages) => {\n        if (item.id === id) {\n          // Update the message\n          messages[index] = assign({}, messages[index], message);\n          // Store the updated message\n          updatedMessage = messages[index];\n        }\n      });\n      // Return the response\n      return [200, updatedMessage];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Messages - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/common/messages').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Prepare the deleted message\n      let deletedMessage = null;\n      // Find the message\n      const index = this._messages.findIndex(item => item.id === id);\n      // Store the deleted message\n      deletedMessage = cloneDeep(this._messages[index]);\n      // Delete the message\n      this._messages.splice(index, 1);\n      // Return the response\n      return [200, deletedMessage];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Mark all as read - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/messages/mark-all-as-read').reply(() => {\n      // Go through all messages\n      this._messages.forEach((item, index, messages) => {\n        // Mark it as read\n        messages[index].read = true;\n        messages[index].seen = true;\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Toggle read status - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/messages/toggle-read-status').reply(({\n      request\n    }) => {\n      // Get the message\n      const message = cloneDeep(request.body.message);\n      // Prepare the updated message\n      let updatedMessage = null;\n      // Find the message and update it\n      this._messages.forEach((item, index, messages) => {\n        if (item.id === message.id) {\n          // Update the message\n          messages[index].read = message.read;\n          // Store the updated message\n          updatedMessage = messages[index];\n        }\n      });\n      // Return the response\n      return [200, updatedMessage];\n    });\n  }\n}\nMessagesMockApi.ɵfac = function MessagesMockApi_Factory(t) {\n  return new (t || MessagesMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n};\nMessagesMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessagesMockApi,\n  factory: MessagesMockApi.ɵfac,\n  providedIn: 'root'\n});\nexport { MessagesMockApi };","map":{"version":3,"names":["assign","cloneDeep","FuseMockApiUtils","messages","messagesData","MessagesMockApi","constructor","_fuseMockApiService","_messages","registerHandlers","onGet","reply","onPost","request","newMessage","body","message","id","guid","unshift","onPatch","updatedMessage","forEach","item","index","onDelete","params","get","deletedMessage","findIndex","splice","read","seen","i0","ɵɵinject","i1","FuseMockApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\mock-api\\common\\messages\\api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { assign, cloneDeep } from 'lodash-es';\r\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\r\nimport { messages as messagesData } from 'app/mock-api/common/messages/data';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MessagesMockApi\r\n{\r\n    private _messages: any = messagesData;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _fuseMockApiService: FuseMockApiService)\r\n    {\r\n        // Register Mock API handlers\r\n        this.registerHandlers();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register Mock API handlers\r\n     */\r\n    registerHandlers(): void\r\n    {\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Messages - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/common/messages')\r\n            .reply(() => [200, cloneDeep(this._messages)]);\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Messages - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/common/messages')\r\n            .reply(({request}) => {\r\n\r\n                // Get the message\r\n                const newMessage = cloneDeep(request.body.message);\r\n\r\n                // Generate a new GUID\r\n                newMessage.id = FuseMockApiUtils.guid();\r\n\r\n                // Unshift the new message\r\n                this._messages.unshift(newMessage);\r\n\r\n                // Return the response\r\n                return [200, newMessage];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Messages - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/common/messages')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and message\r\n                const id = request.body.id;\r\n                const message = cloneDeep(request.body.message);\r\n\r\n                // Prepare the updated message\r\n                let updatedMessage = null;\r\n\r\n                // Find the message and update it\r\n                this._messages.forEach((item: any, index: number, messages: any[]) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        // Update the message\r\n                        messages[index] = assign({}, messages[index], message);\r\n\r\n                        // Store the updated message\r\n                        updatedMessage = messages[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedMessage];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Messages - DELETE\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onDelete('api/common/messages')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id\r\n                const id = request.params.get('id');\r\n\r\n                // Prepare the deleted message\r\n                let deletedMessage = null;\r\n\r\n                // Find the message\r\n                const index = this._messages.findIndex((item: any) => item.id === id);\r\n\r\n                // Store the deleted message\r\n                deletedMessage = cloneDeep(this._messages[index]);\r\n\r\n                // Delete the message\r\n                this._messages.splice(index, 1);\r\n\r\n                // Return the response\r\n                return [200, deletedMessage];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Mark all as read - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/common/messages/mark-all-as-read')\r\n            .reply(() => {\r\n\r\n                // Go through all messages\r\n                this._messages.forEach((item: any, index: number, messages: any[]) => {\r\n\r\n                    // Mark it as read\r\n                    messages[index].read = true;\r\n                    messages[index].seen = true;\r\n                });\r\n\r\n                // Return the response\r\n                return [200, true];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Toggle read status - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/common/messages/toggle-read-status')\r\n            .reply(({request}) => {\r\n\r\n                // Get the message\r\n                const message = cloneDeep(request.body.message);\r\n\r\n                // Prepare the updated message\r\n                let updatedMessage = null;\r\n\r\n                // Find the message and update it\r\n                this._messages.forEach((item: any, index: number, messages: any[]) => {\r\n\r\n                    if ( item.id === message.id )\r\n                    {\r\n                        // Update the message\r\n                        messages[index].read = message.read;\r\n\r\n                        // Store the updated message\r\n                        updatedMessage = messages[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedMessage];\r\n            });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}