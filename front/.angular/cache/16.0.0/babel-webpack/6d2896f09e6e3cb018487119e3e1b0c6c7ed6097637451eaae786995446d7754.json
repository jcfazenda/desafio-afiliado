{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@angular/common/http\";\nclass UpdateVideoService {\n  constructor(sanitizer,\n  //private youtubeApiService: YoutubeApiService,\n  http) {\n    this.sanitizer = sanitizer;\n    this.http = http;\n    this.apiKey = 'AIzaSyCSfh7Ek0dyVgnPBiqLZ4ZyowXDjp7kq-I'; // Substitua com sua chave de API do YouTube\n  }\n  /* Função para extrair o ID do vídeo do YouTube a partir da URL */\n  getSafeVideoUrl(url) {\n    let defaultYoutubeOptions = {\n      rel: 0,\n      controls: 0,\n      modestbranding: 1,\n      showinfo: 0,\n      autoplay: 0,\n      loop: 1,\n      mute: 0,\n      start: 0,\n      end: 60,\n      fs: 0 // Remove o botão de tela cheia do player\n    };\n\n    const videoId = this.extractVideoId(url);\n    let embedUrl = `https://www.youtube.com/embed/${videoId}?`;\n    Object.keys(defaultYoutubeOptions).forEach(key => {\n      embedUrl += `${key}=${defaultYoutubeOptions[key]}&`;\n    });\n    // Remove o '&' final se existir\n    if (embedUrl.endsWith('&')) {\n      embedUrl = embedUrl.slice(0, -1);\n    }\n    return this.sanitizer.bypassSecurityTrustResourceUrl(embedUrl);\n  }\n  extractVideoId(url) {\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?youtu(?:\\.be\\/|be\\.com\\/(?:watch\\?(?:.*&)?v=|embed\\/|v\\/|shorts\\/))([^\\s&]+)/;\n    const match = url.match(regex);\n    return match && match[1] ? match[1] : '';\n  }\n  static #_ = this.ɵfac = function UpdateVideoService_Factory(t) {\n    return new (t || UpdateVideoService)(i0.ɵɵinject(i1.DomSanitizer), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UpdateVideoService,\n    factory: UpdateVideoService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UpdateVideoService };","map":{"version":3,"names":["UpdateVideoService","constructor","sanitizer","http","apiKey","getSafeVideoUrl","url","defaultYoutubeOptions","rel","controls","modestbranding","showinfo","autoplay","loop","mute","start","end","fs","videoId","extractVideoId","embedUrl","Object","keys","forEach","key","endsWith","slice","bypassSecurityTrustResourceUrl","regex","match","_","i0","ɵɵinject","i1","DomSanitizer","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\modules\\services\\update-video.service.ts"],"sourcesContent":["import { HttpClient, HttpParams  } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser'; \r\nimport { YoutubeApiService } from './youtube-api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UpdateVideoService {\r\n\r\n  apiKey = 'AIzaSyCSfh7Ek0dyVgnPBiqLZ4ZyowXDjp7kq-I'; // Substitua com sua chave de API do YouTube\r\n\r\n  constructor(private sanitizer: DomSanitizer,\r\n              //private youtubeApiService: YoutubeApiService,\r\n              private http: HttpClient\r\n  ) {} \r\n \r\n  /* Função para extrair o ID do vídeo do YouTube a partir da URL */ \r\n  getSafeVideoUrl(url: string): SafeResourceUrl { \r\n\r\n    let defaultYoutubeOptions = {\r\n      rel: 0,             // Remove vídeos relacionados ao final da reprodução.\r\n      controls: 0,        // Remove todos os controles do player, incluindo o controle de volume.\r\n      modestbranding: 1,  // Reduz o logotipo do YouTube para um estilo mais modesto no canto\r\n      showinfo: 0,        // Para remover o botão \"Inscrever-se\" e outros elementos como o título do vídeo na URL de incorporação\r\n      autoplay: 0,        // Inicia o vídeo automaticamente quando a página é carregada\r\n      loop: 1,            // Faz o vídeo reiniciar automaticamente após o término\r\n      mute: 0,            // Inicia o vídeo sem áudio\r\n      start: 0,           // Define o tempo de início do vídeo em segundos (exemplo: 30 segundos)\r\n      end: 60,            // Define o tempo de término do vídeo em segundos (exemplo: 60 segundos)\r\n      fs: 0               // Remove o botão de tela cheia do player\r\n    };\r\n\r\n    const videoId = this.extractVideoId(url); \r\n\r\n    let embedUrl = `https://www.youtube.com/embed/${videoId}?`;\r\n\r\n    Object.keys(defaultYoutubeOptions).forEach(key => {\r\n      embedUrl += `${key}=${defaultYoutubeOptions[key]}&`;\r\n    });\r\n\r\n    // Remove o '&' final se existir\r\n    if (embedUrl.endsWith('&')) {\r\n        embedUrl = embedUrl.slice(0, -1);\r\n    }\r\n\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(embedUrl);\r\n  }\r\n\r\n  extractVideoId(url: string): string {\r\n\r\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?youtu(?:\\.be\\/|be\\.com\\/(?:watch\\?(?:.*&)?v=|embed\\/|v\\/|shorts\\/))([^\\s&]+)/;\r\n    const match = url.match(regex); \r\n    return (match && match[1]) ? match[1] : '';\r\n\r\n  } \r\n\r\n}\r\n"],"mappings":";;;AAKA,MAGaA,kBAAkB;EAI7BC,YAAoBC,SAAuB;EAC/B;EACQC,IAAgB;IAFhB,KAAAD,SAAS,GAATA,SAAS;IAET,KAAAC,IAAI,GAAJA,IAAI;IAJxB,KAAAC,MAAM,GAAG,yCAAyC,CAAC,CAAC;EAKjD;EAEH;EACAC,eAAeA,CAACC,GAAW;IAEzB,IAAIC,qBAAqB,GAAG;MAC1BC,GAAG,EAAE,CAAC;MACNC,QAAQ,EAAE,CAAC;MACXC,cAAc,EAAE,CAAC;MACjBC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,CAAC;MACXC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE,CAAC;MACPC,KAAK,EAAE,CAAC;MACRC,GAAG,EAAE,EAAE;MACPC,EAAE,EAAE,CAAC,CAAe;KACrB;;IAED,MAAMC,OAAO,GAAG,IAAI,CAACC,cAAc,CAACb,GAAG,CAAC;IAExC,IAAIc,QAAQ,GAAG,iCAAiCF,OAAO,GAAG;IAE1DG,MAAM,CAACC,IAAI,CAACf,qBAAqB,CAAC,CAACgB,OAAO,CAACC,GAAG,IAAG;MAC/CJ,QAAQ,IAAI,GAAGI,GAAG,IAAIjB,qBAAqB,CAACiB,GAAG,CAAC,GAAG;IACrD,CAAC,CAAC;IAEF;IACA,IAAIJ,QAAQ,CAACK,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxBL,QAAQ,GAAGA,QAAQ,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;IAGpC,OAAO,IAAI,CAACxB,SAAS,CAACyB,8BAA8B,CAACP,QAAQ,CAAC;EAChE;EAEAD,cAAcA,CAACb,GAAW;IAExB,MAAMsB,KAAK,GAAG,wGAAwG;IACtH,MAAMC,KAAK,GAAGvB,GAAG,CAACuB,KAAK,CAACD,KAAK,CAAC;IAC9B,OAAQC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,GAAIA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAE5C;EAAC,QAAAC,CAAA,G;qBA/CU9B,kBAAkB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBrC,kBAAkB;IAAAsC,OAAA,EAAlBtC,kBAAkB,CAAAuC,IAAA;IAAAC,UAAA,EAFjB;EAAM;;SAEPxC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}