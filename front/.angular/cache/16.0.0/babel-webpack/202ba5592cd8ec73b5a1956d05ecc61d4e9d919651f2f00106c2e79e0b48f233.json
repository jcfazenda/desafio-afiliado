{"ast":null,"code":"import { map, ReplaySubject, switchMap } from 'rxjs';\nimport { fromPairs } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@fuse/services/config\";\nclass FuseMediaWatcherService {\n  /**\n   * Constructor\n   */\n  constructor(_breakpointObserver, _fuseConfigService) {\n    this._breakpointObserver = _breakpointObserver;\n    this._fuseConfigService = _fuseConfigService;\n    this._onMediaChange = new ReplaySubject(1);\n    this._fuseConfigService.config$.pipe(map(config => fromPairs(Object.entries(config.screens).map(([alias, screen]) => [alias, `(min-width: ${screen})`]))), switchMap(screens => this._breakpointObserver.observe(Object.values(screens)).pipe(map(state => {\n      // Prepare the observable values and set their defaults\n      const matchingAliases = [];\n      const matchingQueries = {};\n      // Get the matching breakpoints and use them to fill the subject\n      const matchingBreakpoints = Object.entries(state.breakpoints).filter(([query, matches]) => matches) ?? [];\n      for (const [query] of matchingBreakpoints) {\n        // Find the alias of the matching query\n        const matchingAlias = Object.entries(screens).find(([alias, q]) => q === query)[0];\n        // Add the matching query to the observable values\n        if (matchingAlias) {\n          matchingAliases.push(matchingAlias);\n          matchingQueries[matchingAlias] = query;\n        }\n      }\n      // Execute the observable\n      this._onMediaChange.next({\n        matchingAliases,\n        matchingQueries\n      });\n    })))).subscribe();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for _onMediaChange\n   */\n  get onMediaChange$() {\n    return this._onMediaChange.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On media query change\n   *\n   * @param query\n   */\n  onMediaQueryChange$(query) {\n    return this._breakpointObserver.observe(query);\n  }\n}\nFuseMediaWatcherService.ɵfac = function FuseMediaWatcherService_Factory(t) {\n  return new (t || FuseMediaWatcherService)(i0.ɵɵinject(i1.BreakpointObserver), i0.ɵɵinject(i2.FuseConfigService));\n};\nFuseMediaWatcherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FuseMediaWatcherService,\n  factory: FuseMediaWatcherService.ɵfac\n});\nexport { FuseMediaWatcherService };","map":{"version":3,"names":["map","ReplaySubject","switchMap","fromPairs","FuseMediaWatcherService","constructor","_breakpointObserver","_fuseConfigService","_onMediaChange","config$","pipe","config","Object","entries","screens","alias","screen","observe","values","state","matchingAliases","matchingQueries","matchingBreakpoints","breakpoints","filter","query","matches","matchingAlias","find","q","push","next","subscribe","onMediaChange$","asObservable","onMediaQueryChange$","i0","ɵɵinject","i1","BreakpointObserver","i2","FuseConfigService","factory","ɵfac"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\@fuse\\services\\media-watcher\\media-watcher.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\r\nimport { map, Observable, ReplaySubject, switchMap } from 'rxjs';\r\nimport { fromPairs } from 'lodash-es';\r\nimport { FuseConfigService } from '@fuse/services/config';\r\n\r\n@Injectable()\r\nexport class FuseMediaWatcherService\r\n{\r\n    private _onMediaChange: ReplaySubject<{ matchingAliases: string[]; matchingQueries: any }> = new ReplaySubject<{ matchingAliases: string[]; matchingQueries: any }>(1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _breakpointObserver: BreakpointObserver,\r\n        private _fuseConfigService: FuseConfigService\r\n    )\r\n    {\r\n        this._fuseConfigService.config$.pipe(\r\n            map(config => fromPairs(Object.entries(config.screens).map(([alias, screen]) => ([alias, `(min-width: ${screen})`])))),\r\n            switchMap(screens => this._breakpointObserver.observe(Object.values(screens)).pipe(\r\n                map((state) => {\r\n\r\n                    // Prepare the observable values and set their defaults\r\n                    const matchingAliases: string[] = [];\r\n                    const matchingQueries: any = {};\r\n\r\n                    // Get the matching breakpoints and use them to fill the subject\r\n                    const matchingBreakpoints = Object.entries(state.breakpoints).filter(([query, matches]) => matches) ?? [];\r\n                    for ( const [query] of matchingBreakpoints )\r\n                    {\r\n                        // Find the alias of the matching query\r\n                        const matchingAlias = Object.entries(screens).find(([alias, q]) => q === query)[0];\r\n\r\n                        // Add the matching query to the observable values\r\n                        if ( matchingAlias )\r\n                        {\r\n                            matchingAliases.push(matchingAlias);\r\n                            matchingQueries[matchingAlias] = query;\r\n                        }\r\n                    }\r\n\r\n                    // Execute the observable\r\n                    this._onMediaChange.next({\r\n                        matchingAliases,\r\n                        matchingQueries\r\n                    });\r\n                })\r\n            ))\r\n        ).subscribe();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Getter for _onMediaChange\r\n     */\r\n    get onMediaChange$(): Observable<{ matchingAliases: string[]; matchingQueries: any }>\r\n    {\r\n        return this._onMediaChange.asObservable();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On media query change\r\n     *\r\n     * @param query\r\n     */\r\n    onMediaQueryChange$(query: string | string[]): Observable<BreakpointState>\r\n    {\r\n        return this._breakpointObserver.observe(query);\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,EAAcC,aAAa,EAAEC,SAAS,QAAQ,MAAM;AAChE,SAASC,SAAS,QAAQ,WAAW;;;;AAGrC,MACaC,uBAAuB;EAIhC;;;EAGAC,YACYC,mBAAuC,EACvCC,kBAAqC;IADrC,KAAAD,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAPtB,KAAAC,cAAc,GAAuE,IAAIP,aAAa,CAAsD,CAAC,CAAC;IAUlK,IAAI,CAACM,kBAAkB,CAACE,OAAO,CAACC,IAAI,CAChCV,GAAG,CAACW,MAAM,IAAIR,SAAS,CAACS,MAAM,CAACC,OAAO,CAACF,MAAM,CAACG,OAAO,CAAC,CAACd,GAAG,CAAC,CAAC,CAACe,KAAK,EAAEC,MAAM,CAAC,KAAM,CAACD,KAAK,EAAE,eAAeC,MAAM,GAAG,CAAE,CAAC,CAAC,CAAC,EACtHd,SAAS,CAACY,OAAO,IAAI,IAAI,CAACR,mBAAmB,CAACW,OAAO,CAACL,MAAM,CAACM,MAAM,CAACJ,OAAO,CAAC,CAAC,CAACJ,IAAI,CAC9EV,GAAG,CAAEmB,KAAK,IAAI;MAEV;MACA,MAAMC,eAAe,GAAa,EAAE;MACpC,MAAMC,eAAe,GAAQ,EAAE;MAE/B;MACA,MAAMC,mBAAmB,GAAGV,MAAM,CAACC,OAAO,CAACM,KAAK,CAACI,WAAW,CAAC,CAACC,MAAM,CAAC,CAAC,CAACC,KAAK,EAAEC,OAAO,CAAC,KAAKA,OAAO,CAAC,IAAI,EAAE;MACzG,KAAM,MAAM,CAACD,KAAK,CAAC,IAAIH,mBAAmB,EAC1C;QACI;QACA,MAAMK,aAAa,GAAGf,MAAM,CAACC,OAAO,CAACC,OAAO,CAAC,CAACc,IAAI,CAAC,CAAC,CAACb,KAAK,EAAEc,CAAC,CAAC,KAAKA,CAAC,KAAKJ,KAAK,CAAC,CAAC,CAAC,CAAC;QAElF;QACA,IAAKE,aAAa,EAClB;UACIP,eAAe,CAACU,IAAI,CAACH,aAAa,CAAC;UACnCN,eAAe,CAACM,aAAa,CAAC,GAAGF,KAAK;;;MAI9C;MACA,IAAI,CAACjB,cAAc,CAACuB,IAAI,CAAC;QACrBX,eAAe;QACfC;OACH,CAAC;IACN,CAAC,CAAC,CACL,CAAC,CACL,CAACW,SAAS,EAAE;EACjB;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIC,cAAcA,CAAA;IAEd,OAAO,IAAI,CAACzB,cAAc,CAAC0B,YAAY,EAAE;EAC7C;EAEA;EACA;EACA;EAEA;;;;;EAKAC,mBAAmBA,CAACV,KAAwB;IAExC,OAAO,IAAI,CAACnB,mBAAmB,CAACW,OAAO,CAACQ,KAAK,CAAC;EAClD;;AAtESrB,uBAAuB,C;mBAAvBA,uBAAuB,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;AAAA;AAAvBrC,uBAAuB,C;SAAvBA,uBAAuB;EAAAsC,OAAA,EAAvBtC,uBAAuB,CAAAuC;AAAA;SAAvBvC,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}