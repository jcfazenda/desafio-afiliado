{"ast":null,"code":"import { APP_INITIALIZER } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\nimport { FuseMockApiInterceptor } from '@fuse/lib/mock-api/mock-api.interceptor';\nimport * as i0 from \"@angular/core\";\nclass FuseMockApiModule {\n  /**\n   * FuseMockApi module default configuration.\n   *\n   * @param mockApiServices - Array of services that register mock API handlers\n   * @param config - Configuration options\n   * @param config.delay - Default delay value in milliseconds to apply all responses\n   */\n  static forRoot(mockApiServices, config) {\n    return {\n      ngModule: FuseMockApiModule,\n      providers: [{\n        provide: APP_INITIALIZER,\n        deps: [...mockApiServices],\n        useFactory: () => () => null,\n        multi: true\n      }, {\n        provide: FUSE_MOCK_API_DEFAULT_DELAY,\n        useValue: config?.delay ?? 0\n      }]\n    };\n  }\n}\nFuseMockApiModule.ɵfac = function FuseMockApiModule_Factory(t) {\n  return new (t || FuseMockApiModule)();\n};\nFuseMockApiModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: FuseMockApiModule\n});\nFuseMockApiModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: FuseMockApiInterceptor,\n    multi: true\n  }]\n});\nexport { FuseMockApiModule };","map":{"version":3,"names":["APP_INITIALIZER","HTTP_INTERCEPTORS","FUSE_MOCK_API_DEFAULT_DELAY","FuseMockApiInterceptor","FuseMockApiModule","forRoot","mockApiServices","config","ngModule","providers","provide","deps","useFactory","multi","useValue","delay","useClass"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\@fuse\\lib\\mock-api\\mock-api.module.ts"],"sourcesContent":["import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\r\nimport { FuseMockApiInterceptor } from '@fuse/lib/mock-api/mock-api.interceptor';\r\n\r\n@NgModule({\r\n    providers: [\r\n        {\r\n            provide : HTTP_INTERCEPTORS,\r\n            useClass: FuseMockApiInterceptor,\r\n            multi   : true\r\n        }\r\n    ]\r\n})\r\nexport class FuseMockApiModule\r\n{\r\n    /**\r\n     * FuseMockApi module default configuration.\r\n     *\r\n     * @param mockApiServices - Array of services that register mock API handlers\r\n     * @param config - Configuration options\r\n     * @param config.delay - Default delay value in milliseconds to apply all responses\r\n     */\r\n    static forRoot(mockApiServices: any[], config?: { delay?: number }): ModuleWithProviders<FuseMockApiModule>\r\n    {\r\n        return {\r\n            ngModule : FuseMockApiModule,\r\n            providers: [\r\n                {\r\n                    provide   : APP_INITIALIZER,\r\n                    deps      : [...mockApiServices],\r\n                    useFactory: () => (): any => null,\r\n                    multi     : true\r\n                },\r\n                {\r\n                    provide : FUSE_MOCK_API_DEFAULT_DELAY,\r\n                    useValue: config?.delay ?? 0\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAuC,eAAe;AAC9E,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,2BAA2B,QAAQ,uCAAuC;AACnF,SAASC,sBAAsB,QAAQ,yCAAyC;;AAEhF,MASaC,iBAAiB;EAE1B;;;;;;;EAOA,OAAOC,OAAOA,CAACC,eAAsB,EAAEC,MAA2B;IAE9D,OAAO;MACHC,QAAQ,EAAGJ,iBAAiB;MAC5BK,SAAS,EAAE,CACP;QACIC,OAAO,EAAKV,eAAe;QAC3BW,IAAI,EAAQ,CAAC,GAAGL,eAAe,CAAC;QAChCM,UAAU,EAAEA,CAAA,KAAM,MAAW,IAAI;QACjCC,KAAK,EAAO;OACf,EACD;QACIH,OAAO,EAAGR,2BAA2B;QACrCY,QAAQ,EAAEP,MAAM,EAAEQ,KAAK,IAAI;OAC9B;KAER;EACL;;AA1BSX,iBAAiB,C;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB,C;QAAjBA;AAAiB;AAAjBA,iBAAiB,C;aARf,CACP;IACIM,OAAO,EAAGT,iBAAiB;IAC3Be,QAAQ,EAAEb,sBAAsB;IAChCU,KAAK,EAAK;GACb;AACJ;SAEQT,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}