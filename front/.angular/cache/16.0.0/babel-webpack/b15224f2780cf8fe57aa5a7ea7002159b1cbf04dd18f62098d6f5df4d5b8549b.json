{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { delay, of, switchMap, throwError } from 'rxjs';\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nclass FuseMockApiInterceptor {\n  /**\n   * Constructor\n   */\n  constructor(_defaultDelay, _fuseMockApiService) {\n    this._defaultDelay = _defaultDelay;\n    this._fuseMockApiService = _fuseMockApiService;\n  }\n  /**\n   * Intercept\n   *\n   * @param request\n   * @param next\n   */\n  intercept(request, next) {\n    // Try to get the request handler\n    const {\n      handler,\n      urlParams\n    } = this._fuseMockApiService.findHandler(request.method.toUpperCase(), request.url);\n    // Pass through if the request handler does not exist\n    if (!handler) {\n      return next.handle(request);\n    }\n    // Set the intercepted request on the handler\n    handler.request = request;\n    // Set the url params on the handler\n    handler.urlParams = urlParams;\n    // Subscribe to the response function observable\n    return handler.response.pipe(delay(handler.delay ?? this._defaultDelay ?? 0), switchMap(response => {\n      // If there is no response data,\n      // throw an error response\n      if (!response) {\n        response = new HttpErrorResponse({\n          error: 'NOT FOUND',\n          status: 404,\n          statusText: 'NOT FOUND'\n        });\n        return throwError(response);\n      }\n      // Parse the response data\n      const data = {\n        status: response[0],\n        body: response[1]\n      };\n      // If the status code is in between 200 and 300,\n      // return a success response\n      if (data.status >= 200 && data.status < 300) {\n        response = new HttpResponse({\n          body: data.body,\n          status: data.status,\n          statusText: 'OK'\n        });\n        return of(response);\n      }\n      // For other status codes,\n      // throw an error response\n      response = new HttpErrorResponse({\n        error: data.body.error,\n        status: data.status,\n        statusText: 'ERROR'\n      });\n      return throwError(response);\n    }));\n  }\n  static #_ = this.ɵfac = function FuseMockApiInterceptor_Factory(t) {\n    return new (t || FuseMockApiInterceptor)(i0.ɵɵinject(FUSE_MOCK_API_DEFAULT_DELAY), i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMockApiInterceptor,\n    factory: FuseMockApiInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FuseMockApiInterceptor };","map":{"version":3,"names":["HttpErrorResponse","HttpResponse","delay","of","switchMap","throwError","FUSE_MOCK_API_DEFAULT_DELAY","FuseMockApiInterceptor","constructor","_defaultDelay","_fuseMockApiService","intercept","request","next","handler","urlParams","findHandler","method","toUpperCase","url","handle","response","pipe","error","status","statusText","data","body","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\@fuse\\lib\\mock-api\\mock-api.interceptor.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { delay, Observable, of, switchMap, throwError } from 'rxjs';\r\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\r\nimport { FuseMockApiService } from '@fuse/lib/mock-api/mock-api.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuseMockApiInterceptor implements HttpInterceptor\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        @Inject(FUSE_MOCK_API_DEFAULT_DELAY) private _defaultDelay: number,\r\n        private _fuseMockApiService: FuseMockApiService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Intercept\r\n     *\r\n     * @param request\r\n     * @param next\r\n     */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>\r\n    {\r\n        // Try to get the request handler\r\n        const {\r\n                  handler,\r\n                  urlParams\r\n              } = this._fuseMockApiService.findHandler(request.method.toUpperCase(), request.url);\r\n\r\n        // Pass through if the request handler does not exist\r\n        if ( !handler )\r\n        {\r\n            return next.handle(request);\r\n        }\r\n\r\n        // Set the intercepted request on the handler\r\n        handler.request = request;\r\n\r\n        // Set the url params on the handler\r\n        handler.urlParams = urlParams;\r\n\r\n        // Subscribe to the response function observable\r\n        return handler.response.pipe(\r\n            delay(handler.delay ?? this._defaultDelay ?? 0),\r\n            switchMap((response) => {\r\n\r\n                // If there is no response data,\r\n                // throw an error response\r\n                if ( !response )\r\n                {\r\n                    response = new HttpErrorResponse({\r\n                        error     : 'NOT FOUND',\r\n                        status    : 404,\r\n                        statusText: 'NOT FOUND'\r\n                    });\r\n\r\n                    return throwError(response);\r\n                }\r\n\r\n                // Parse the response data\r\n                const data = {\r\n                    status: response[0],\r\n                    body  : response[1]\r\n                };\r\n\r\n                // If the status code is in between 200 and 300,\r\n                // return a success response\r\n                if ( data.status >= 200 && data.status < 300 )\r\n                {\r\n                    response = new HttpResponse({\r\n                        body      : data.body,\r\n                        status    : data.status,\r\n                        statusText: 'OK'\r\n                    });\r\n\r\n                    return of(response);\r\n                }\r\n\r\n                // For other status codes,\r\n                // throw an error response\r\n                response = new HttpErrorResponse({\r\n                    error     : data.body.error,\r\n                    status    : data.status,\r\n                    statusText: 'ERROR'\r\n                });\r\n\r\n                return throwError(response);\r\n            }));\r\n    }\r\n}\r\n"],"mappings":"AACA,SAASA,iBAAiB,EAAwDC,YAAY,QAAQ,sBAAsB;AAC5H,SAASC,KAAK,EAAcC,EAAE,EAAEC,SAAS,EAAEC,UAAU,QAAQ,MAAM;AACnE,SAASC,2BAA2B,QAAQ,uCAAuC;;;AAGnF,MAGaC,sBAAsB;EAE/B;;;EAGAC,YACiDC,aAAqB,EAC1DC,mBAAuC;IADF,KAAAD,aAAa,GAAbA,aAAa;IAClD,KAAAC,mBAAmB,GAAnBA,mBAAmB;EAG/B;EAEA;;;;;;EAMAC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAElD;IACA,MAAM;MACIC,OAAO;MACPC;IAAS,CACZ,GAAG,IAAI,CAACL,mBAAmB,CAACM,WAAW,CAACJ,OAAO,CAACK,MAAM,CAACC,WAAW,EAAE,EAAEN,OAAO,CAACO,GAAG,CAAC;IAEzF;IACA,IAAK,CAACL,OAAO,EACb;MACI,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;;IAG/B;IACAE,OAAO,CAACF,OAAO,GAAGA,OAAO;IAEzB;IACAE,OAAO,CAACC,SAAS,GAAGA,SAAS;IAE7B;IACA,OAAOD,OAAO,CAACO,QAAQ,CAACC,IAAI,CACxBpB,KAAK,CAACY,OAAO,CAACZ,KAAK,IAAI,IAAI,CAACO,aAAa,IAAI,CAAC,CAAC,EAC/CL,SAAS,CAAEiB,QAAQ,IAAI;MAEnB;MACA;MACA,IAAK,CAACA,QAAQ,EACd;QACIA,QAAQ,GAAG,IAAIrB,iBAAiB,CAAC;UAC7BuB,KAAK,EAAO,WAAW;UACvBC,MAAM,EAAM,GAAG;UACfC,UAAU,EAAE;SACf,CAAC;QAEF,OAAOpB,UAAU,CAACgB,QAAQ,CAAC;;MAG/B;MACA,MAAMK,IAAI,GAAG;QACTF,MAAM,EAAEH,QAAQ,CAAC,CAAC,CAAC;QACnBM,IAAI,EAAIN,QAAQ,CAAC,CAAC;OACrB;MAED;MACA;MACA,IAAKK,IAAI,CAACF,MAAM,IAAI,GAAG,IAAIE,IAAI,CAACF,MAAM,GAAG,GAAG,EAC5C;QACIH,QAAQ,GAAG,IAAIpB,YAAY,CAAC;UACxB0B,IAAI,EAAQD,IAAI,CAACC,IAAI;UACrBH,MAAM,EAAME,IAAI,CAACF,MAAM;UACvBC,UAAU,EAAE;SACf,CAAC;QAEF,OAAOtB,EAAE,CAACkB,QAAQ,CAAC;;MAGvB;MACA;MACAA,QAAQ,GAAG,IAAIrB,iBAAiB,CAAC;QAC7BuB,KAAK,EAAOG,IAAI,CAACC,IAAI,CAACJ,KAAK;QAC3BC,MAAM,EAAME,IAAI,CAACF,MAAM;QACvBC,UAAU,EAAE;OACf,CAAC;MAEF,OAAOpB,UAAU,CAACgB,QAAQ,CAAC;IAC/B,CAAC,CAAC,CAAC;EACX;EAAC,QAAAO,CAAA,G;qBArFQrB,sBAAsB,EAAAsB,EAAA,CAAAC,QAAA,CAMnBxB,2BAA2B,GAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAN9B1B,sBAAsB;IAAA2B,OAAA,EAAtB3B,sBAAsB,CAAA4B,IAAA;IAAAC,UAAA,EAFnB;EAAM;;SAET7B,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}