{"ast":null,"code":"import { map, ReplaySubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  /**\n   * Constructor\n   */\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this._user = new ReplaySubject(1);\n  }\n  /**\n   * Setter & getter for user\n   *\n   * @param value\n   */\n  set user(value) {\n    // Store the value\n    this._user.next(value);\n  }\n  get user$() {\n    return this._user.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get the current logged in user data\n   */\n  get() {\n    return this._httpClient.get('api/common/user').pipe(tap(user => {\n      this._user.next(user);\n    }));\n  }\n  /**\n   * Update the user\n   *\n   * @param user\n   */\n  update(user) {\n    return this._httpClient.patch('api/common/user', {\n      user\n    }).pipe(map(response => {\n      this._user.next(response);\n    }));\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UserService };","map":{"version":3,"names":["map","ReplaySubject","tap","UserService","constructor","_httpClient","_user","user","value","next","user$","asObservable","get","pipe","update","patch","response","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\core\\user\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable, ReplaySubject, tap } from 'rxjs';\r\nimport { User } from 'app/core/user/user.types';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserService\r\n{\r\n    private _user: ReplaySubject<User> = new ReplaySubject<User>(1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _httpClient: HttpClient)\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Setter & getter for user\r\n     *\r\n     * @param value\r\n     */\r\n    set user(value: User)\r\n    {\r\n        // Store the value\r\n        this._user.next(value);\r\n    }\r\n\r\n    get user$(): Observable<User>\r\n    {\r\n        return this._user.asObservable();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get the current logged in user data\r\n     */\r\n    get(): Observable<User>\r\n    {\r\n        return this._httpClient.get<User>('api/common/user').pipe( \r\n            tap((user) => {\r\n                this._user.next(user); \r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the user\r\n     *\r\n     * @param user\r\n     */\r\n    update(user: User): Observable<any>\r\n    {\r\n        return this._httpClient.patch<User>('api/common/user', {user}).pipe(\r\n            map((response) => {\r\n                this._user.next(response);\r\n            })\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,EAAcC,aAAa,EAAEC,GAAG,QAAQ,MAAM;;;AAG1D,MAGaC,WAAW;EAIpB;;;EAGAC,YAAoBC,WAAuB;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IALvB,KAAAC,KAAK,GAAwB,IAAIL,aAAa,CAAO,CAAC,CAAC;EAO/D;EAEA;;;;;EAKA,IAAIM,IAAIA,CAACC,KAAW;IAEhB;IACA,IAAI,CAACF,KAAK,CAACG,IAAI,CAACD,KAAK,CAAC;EAC1B;EAEA,IAAIE,KAAKA,CAAA;IAEL,OAAO,IAAI,CAACJ,KAAK,CAACK,YAAY,EAAE;EACpC;EAEA;EACA;EACA;EAEA;;;EAGAC,GAAGA,CAAA;IAEC,OAAO,IAAI,CAACP,WAAW,CAACO,GAAG,CAAO,iBAAiB,CAAC,CAACC,IAAI,CACrDX,GAAG,CAAEK,IAAI,IAAI;MACT,IAAI,CAACD,KAAK,CAACG,IAAI,CAACF,IAAI,CAAC;IACzB,CAAC,CAAC,CACL;EACL;EAEA;;;;;EAKAO,MAAMA,CAACP,IAAU;IAEb,OAAO,IAAI,CAACF,WAAW,CAACU,KAAK,CAAO,iBAAiB,EAAE;MAACR;IAAI,CAAC,CAAC,CAACM,IAAI,CAC/Db,GAAG,CAAEgB,QAAQ,IAAI;MACb,IAAI,CAACV,KAAK,CAACG,IAAI,CAACO,QAAQ,CAAC;IAC7B,CAAC,CAAC,CACL;EACL;EAAC,QAAAC,CAAA,G;qBAvDQd,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnB,WAAW;IAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;IAAAC,UAAA,EAFR;EAAM;;SAETtB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}