{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass PriceService {\n  constructor() {\n    this.installments = [];\n    this.maxInstallments = 12; // Máximo de parcelas\n    this.maxInstallmentsWithoutInterest = 3; // Máximo de parcelas sem Juros\n    this.interestRate = 5.0; // Taxa de juros (5% neste exemplo)\n  }\n\n  generateInstallments(price) {\n    this.maxInstallmentsWithoutInterest = price.card_price_num;\n    this.maxInstallments = price.card_max_installments;\n    this.installments = [];\n    for (let i = 1; i <= this.maxInstallments; i++) {\n      const installmentAmount = this.calculateInstallmentAmount(price.principalPrice, i);\n      if (isNaN(installmentAmount)) {\n        break; // Sai do loop se o cálculo retornar NaN\n      }\n\n      const totalAmount = (installmentAmount * i).toFixed(2);\n      let description = `${i}x de R$ ${installmentAmount.toFixed(2)}`;\n      let interestFree = '';\n      if (i <= this.maxInstallmentsWithoutInterest) {\n        interestFree = ' sem Juros';\n      }\n      this.installments.push({\n        selected: false,\n        description: description,\n        interestFree: interestFree,\n        amount: `R$ ${totalAmount}`\n      });\n    }\n    return this.installments;\n  }\n  calculateInstallmentAmount(principal, installments) {\n    if (installments <= this.maxInstallmentsWithoutInterest) {\n      return principal / installments; // Parcelas sem juros\n    } else {\n      const rate = this.interestRate / 100;\n      return principal * (rate + 1) / installments; // Parcelas com juros\n    }\n  }\n  static #_ = this.ɵfac = function PriceService_Factory(t) {\n    return new (t || PriceService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PriceService,\n    factory: PriceService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { PriceService };","map":{"version":3,"names":["PriceService","constructor","installments","maxInstallments","maxInstallmentsWithoutInterest","interestRate","generateInstallments","price","card_price_num","card_max_installments","i","installmentAmount","calculateInstallmentAmount","principalPrice","isNaN","totalAmount","toFixed","description","interestFree","push","selected","amount","principal","rate","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\modules\\admin\\apps\\products\\price\\price.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PriceService {\r\n\r\n  installments: { selected: boolean, description: string, interestFree: string, amount: string }[] = [];\r\n  maxInstallments = 12; // Máximo de parcelas\r\n  maxInstallmentsWithoutInterest = 3; // Máximo de parcelas sem Juros\r\n  interestRate = 5.0; // Taxa de juros (5% neste exemplo)\r\n\r\n  constructor() {}\r\n\r\n  generateInstallments(price: any): any { \r\n\r\n        this.maxInstallmentsWithoutInterest = price.card_price_num;\r\n        this.maxInstallments                = price.card_max_installments; \r\n        this.installments                   = [];\r\n\r\n        for (let i = 1; i <= this.maxInstallments; i++) {\r\n\r\n                const installmentAmount = this.calculateInstallmentAmount(price.principalPrice, i);\r\n                if (isNaN(installmentAmount)) {\r\n                    break; // Sai do loop se o cálculo retornar NaN\r\n                }\r\n\r\n                const totalAmount = (installmentAmount * i).toFixed(2);\r\n                let description = `${i}x de R$ ${installmentAmount.toFixed(2)}`;\r\n                let interestFree = '';\r\n\r\n                if (i <= this.maxInstallmentsWithoutInterest) {\r\n                    interestFree = ' sem Juros';\r\n                } \r\n                \r\n                this.installments.push({ \r\n                    selected: false,\r\n                    description: description,\r\n                    interestFree: interestFree,\r\n                    amount: `R$ ${totalAmount}`\r\n                });\r\n\r\n        }\r\n\r\n        return this.installments;\r\n  }\r\n\r\n  calculateInstallmentAmount(principal: number, installments: number): number {\r\n    if (installments <= this.maxInstallmentsWithoutInterest) {\r\n      return principal / installments; // Parcelas sem juros\r\n    } else {\r\n      const rate = this.interestRate / 100;\r\n      return (principal * (rate + 1)) / installments; // Parcelas com juros\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAEA,MAGaA,YAAY;EAOvBC,YAAA;IALA,KAAAC,YAAY,GAAuF,EAAE;IACrG,KAAAC,eAAe,GAAG,EAAE,CAAC,CAAC;IACtB,KAAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC;IACpC,KAAAC,YAAY,GAAG,GAAG,CAAC,CAAC;EAEL;;EAEfC,oBAAoBA,CAACC,KAAU;IAEzB,IAAI,CAACH,8BAA8B,GAAGG,KAAK,CAACC,cAAc;IAC1D,IAAI,CAACL,eAAe,GAAkBI,KAAK,CAACE,qBAAqB;IACjE,IAAI,CAACP,YAAY,GAAqB,EAAE;IAExC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAACP,eAAe,EAAEO,CAAC,EAAE,EAAE;MAExC,MAAMC,iBAAiB,GAAG,IAAI,CAACC,0BAA0B,CAACL,KAAK,CAACM,cAAc,EAAEH,CAAC,CAAC;MAClF,IAAII,KAAK,CAACH,iBAAiB,CAAC,EAAE;QAC1B,MAAM,CAAC;;;MAGX,MAAMI,WAAW,GAAG,CAACJ,iBAAiB,GAAGD,CAAC,EAAEM,OAAO,CAAC,CAAC,CAAC;MACtD,IAAIC,WAAW,GAAG,GAAGP,CAAC,WAAWC,iBAAiB,CAACK,OAAO,CAAC,CAAC,CAAC,EAAE;MAC/D,IAAIE,YAAY,GAAG,EAAE;MAErB,IAAIR,CAAC,IAAI,IAAI,CAACN,8BAA8B,EAAE;QAC1Cc,YAAY,GAAG,YAAY;;MAG/B,IAAI,CAAChB,YAAY,CAACiB,IAAI,CAAC;QACnBC,QAAQ,EAAE,KAAK;QACfH,WAAW,EAAEA,WAAW;QACxBC,YAAY,EAAEA,YAAY;QAC1BG,MAAM,EAAE,MAAMN,WAAW;OAC5B,CAAC;;IAIV,OAAO,IAAI,CAACb,YAAY;EAC9B;EAEAU,0BAA0BA,CAACU,SAAiB,EAAEpB,YAAoB;IAChE,IAAIA,YAAY,IAAI,IAAI,CAACE,8BAA8B,EAAE;MACvD,OAAOkB,SAAS,GAAGpB,YAAY,CAAC,CAAC;KAClC,MAAM;MACL,MAAMqB,IAAI,GAAG,IAAI,CAAClB,YAAY,GAAG,GAAG;MACpC,OAAQiB,SAAS,IAAIC,IAAI,GAAG,CAAC,CAAC,GAAIrB,YAAY,CAAC,CAAC;;EAEpD;EAAC,QAAAsB,CAAA,G;qBAjDUxB,YAAY;EAAA;EAAA,QAAAyB,EAAA,G;WAAZzB,YAAY;IAAA0B,OAAA,EAAZ1B,YAAY,CAAA2B,IAAA;IAAAC,UAAA,EAFX;EAAM;;SAEP5B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}