{"ast":null,"code":"import hljs from 'highlight.js';\nimport * as i0 from \"@angular/core\";\nclass FuseHighlightService {\n  /**\n   * Constructor\n   */\n  constructor() {}\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Highlight\n   */\n  highlight(code, language) {\n    // Format the code\n    code = this._format(code);\n    // Highlight and return the code\n    return hljs.highlight(code, {\n      language\n    }).value;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Remove the empty lines around the code block\n   * and re-align the indentation based on the first\n   * non-whitespace indented character\n   *\n   * @param code\n   * @private\n   */\n  _format(code) {\n    let indentation = 0;\n    // Split the code into lines and store the lines\n    const lines = code.split('\\n');\n    // Trim the empty lines around the code block\n    while (lines.length && lines[0].trim() === '') {\n      lines.shift();\n    }\n    while (lines.length && lines[lines.length - 1].trim() === '') {\n      lines.pop();\n    }\n    // Iterate through the lines\n    lines.filter(line => line.length).forEach((line, index) => {\n      // Always get the indentation of the first line so we can\n      // have something to compare with\n      if (index === 0) {\n        indentation = line.search(/\\S|$/);\n        return;\n      }\n      // Look at all the remaining lines to figure out the smallest indentation.\n      indentation = Math.min(line.search(/\\S|$/), indentation);\n    });\n    // Iterate through the lines one more time, remove the extra\n    // indentation, join them together and return it\n    return lines.map(line => line.substring(indentation)).join('\\n');\n  }\n}\nFuseHighlightService.ɵfac = function FuseHighlightService_Factory(t) {\n  return new (t || FuseHighlightService)();\n};\nFuseHighlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FuseHighlightService,\n  factory: FuseHighlightService.ɵfac,\n  providedIn: 'root'\n});\nexport { FuseHighlightService };","map":{"version":3,"names":["hljs","FuseHighlightService","constructor","highlight","code","language","_format","value","indentation","lines","split","length","trim","shift","pop","filter","line","forEach","index","search","Math","min","map","substring","join","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\@fuse\\components\\highlight\\highlight.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport hljs from 'highlight.js';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuseHighlightService\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Highlight\r\n     */\r\n    highlight(code: string, language: string): string\r\n    {\r\n        // Format the code\r\n        code = this._format(code);\r\n\r\n        // Highlight and return the code\r\n        return hljs.highlight(code, {language}).value;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Remove the empty lines around the code block\r\n     * and re-align the indentation based on the first\r\n     * non-whitespace indented character\r\n     *\r\n     * @param code\r\n     * @private\r\n     */\r\n    private _format(code: string): string\r\n    {\r\n        let indentation = 0;\r\n\r\n        // Split the code into lines and store the lines\r\n        const lines = code.split('\\n');\r\n\r\n        // Trim the empty lines around the code block\r\n        while ( lines.length && lines[0].trim() === '' )\r\n        {\r\n            lines.shift();\r\n        }\r\n\r\n        while ( lines.length && lines[lines.length - 1].trim() === '' )\r\n        {\r\n            lines.pop();\r\n        }\r\n\r\n        // Iterate through the lines\r\n        lines.filter(line => line.length)\r\n             .forEach((line, index) => {\r\n\r\n                 // Always get the indentation of the first line so we can\r\n                 // have something to compare with\r\n                 if ( index === 0 )\r\n                 {\r\n                     indentation = line.search(/\\S|$/);\r\n                     return;\r\n                 }\r\n\r\n                 // Look at all the remaining lines to figure out the smallest indentation.\r\n                 indentation = Math.min(line.search(/\\S|$/), indentation);\r\n             });\r\n\r\n        // Iterate through the lines one more time, remove the extra\r\n        // indentation, join them together and return it\r\n        return lines.map(line => line.substring(indentation)).join('\\n');\r\n    }\r\n}\r\n"],"mappings":"AACA,OAAOA,IAAI,MAAM,cAAc;;AAE/B,MAGaC,oBAAoB;EAE7B;;;EAGAC,YAAA,GAEA;EAEA;EACA;EACA;EAEA;;;EAGAC,SAASA,CAACC,IAAY,EAAEC,QAAgB;IAEpC;IACAD,IAAI,GAAG,IAAI,CAACE,OAAO,CAACF,IAAI,CAAC;IAEzB;IACA,OAAOJ,IAAI,CAACG,SAAS,CAACC,IAAI,EAAE;MAACC;IAAQ,CAAC,CAAC,CAACE,KAAK;EACjD;EAEA;EACA;EACA;EAEA;;;;;;;;EAQQD,OAAOA,CAACF,IAAY;IAExB,IAAII,WAAW,GAAG,CAAC;IAEnB;IACA,MAAMC,KAAK,GAAGL,IAAI,CAACM,KAAK,CAAC,IAAI,CAAC;IAE9B;IACA,OAAQD,KAAK,CAACE,MAAM,IAAIF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,EAAE,KAAK,EAAE,EAC9C;MACIH,KAAK,CAACI,KAAK,EAAE;;IAGjB,OAAQJ,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,CAACC,IAAI,EAAE,KAAK,EAAE,EAC7D;MACIH,KAAK,CAACK,GAAG,EAAE;;IAGf;IACAL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,MAAM,CAAC,CAC3BM,OAAO,CAAC,CAACD,IAAI,EAAEE,KAAK,KAAI;MAErB;MACA;MACA,IAAKA,KAAK,KAAK,CAAC,EAChB;QACIV,WAAW,GAAGQ,IAAI,CAACG,MAAM,CAAC,MAAM,CAAC;QACjC;;MAGJ;MACAX,WAAW,GAAGY,IAAI,CAACC,GAAG,CAACL,IAAI,CAACG,MAAM,CAAC,MAAM,CAAC,EAAEX,WAAW,CAAC;IAC5D,CAAC,CAAC;IAEP;IACA;IACA,OAAOC,KAAK,CAACa,GAAG,CAACN,IAAI,IAAIA,IAAI,CAACO,SAAS,CAACf,WAAW,CAAC,CAAC,CAACgB,IAAI,CAAC,IAAI,CAAC;EACpE;;AA1ESvB,oBAAoB,C;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB,C;SAApBA,oBAAoB;EAAAwB,OAAA,EAApBxB,oBAAoB,CAAAyB,IAAA;EAAAC,UAAA,EAFjB;AAAM;SAET1B,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}