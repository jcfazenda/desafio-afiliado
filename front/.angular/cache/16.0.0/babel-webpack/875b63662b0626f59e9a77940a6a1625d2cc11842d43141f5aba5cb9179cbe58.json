{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass NoAuthGuard {\n  /**\n   * Constructor\n   */\n  constructor(_authService, _router) {\n    this._authService = _authService;\n    this._router = _router;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Can match\n   *\n   * @param route\n   * @param segments\n   */\n  canMatch(route, segments) {\n    return this._check();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Check the authenticated status\n   *\n   * @private\n   */\n  _check() {\n    // Check the authentication status and return an observable of\n    // \"true\" or \"false\" to allow or prevent the access\n    return this._authService.check().pipe(switchMap(authenticated => of(!authenticated)));\n  }\n  static #_ = this.ɵfac = function NoAuthGuard_Factory(t) {\n    return new (t || NoAuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NoAuthGuard,\n    factory: NoAuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { NoAuthGuard };","map":{"version":3,"names":["of","switchMap","NoAuthGuard","constructor","_authService","_router","canMatch","route","segments","_check","check","pipe","authenticated","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\core\\auth\\guards\\noAuth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanMatch, Route, Router, UrlSegment, UrlTree } from '@angular/router';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { AuthService } from 'app/core/auth/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NoAuthGuard implements CanMatch\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _authService: AuthService,\r\n        private _router: Router\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Can match\r\n     *\r\n     * @param route\r\n     * @param segments\r\n     */\r\n    canMatch(route: Route, segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree\r\n    {\r\n        return this._check();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Check the authenticated status\r\n     *\r\n     * @private\r\n     */\r\n    private _check(): Observable<boolean>\r\n    {\r\n        // Check the authentication status and return an observable of\r\n        // \"true\" or \"false\" to allow or prevent the access\r\n        return this._authService.check().pipe(\r\n            switchMap((authenticated) => of(!authenticated))\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;;AAGhD,MAGaC,WAAW;EAEpB;;;EAGAC,YACYC,YAAyB,EACzBC,OAAe;IADf,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,OAAO,GAAPA,OAAO;EAGnB;EAEA;EACA;EACA;EAEA;;;;;;EAMAC,QAAQA,CAACC,KAAY,EAAEC,QAAsB;IAEzC,OAAO,IAAI,CAACC,MAAM,EAAE;EACxB;EAEA;EACA;EACA;EAEA;;;;;EAKQA,MAAMA,CAAA;IAEV;IACA;IACA,OAAO,IAAI,CAACL,YAAY,CAACM,KAAK,EAAE,CAACC,IAAI,CACjCV,SAAS,CAAEW,aAAa,IAAKZ,EAAE,CAAC,CAACY,aAAa,CAAC,CAAC,CACnD;EACL;EAAC,QAAAC,CAAA,G;qBA3CQX,WAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFR;EAAM;;SAETrB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}