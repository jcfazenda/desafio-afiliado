{"ast":null,"code":"import { assign, cloneDeep, omit } from 'lodash-es';\nimport { chats as chatsData, contacts as contactsData, messages as messagesData, profile as profileData } from 'app/mock-api/apps/chat/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nclass ChatMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._chats = chatsData;\n    this._contacts = contactsData;\n    this._messages = messagesData;\n    this._profile = profileData;\n    // Register Mock API handlers\n    this.registerHandlers();\n    // Modify the chats array to attach certain data to it\n    this._chats = this._chats.map(chat => ({\n      ...chat,\n      // Get the actual contact object from the id and attach it to the chat\n      contact: this._contacts.find(contact => contact.id === chat.contactId),\n      // Since we use same set of messages on all chats, we assign them here.\n      messages: this._messages.map(message => ({\n        ...message,\n        chatId: chat.id,\n        contactId: message.contactId === 'me' ? this._profile.id : chat.contactId,\n        isMine: message.contactId === 'me'\n      }))\n    }));\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Chats - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/chat/chats').reply(() => {\n      // Clone the chats\n      const chats = cloneDeep(this._chats);\n      // Return the response\n      return [200, chats];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Chat - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/chat/chat').reply(({\n      request\n    }) => {\n      // Get the chat id\n      const id = request.params.get('id');\n      // Clone the chats\n      const chats = cloneDeep(this._chats);\n      // Find the chat we need\n      const chat = chats.find(item => item.id === id);\n      // Return the response\n      return [200, chat];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Chat - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/chat/chat').reply(({\n      request\n    }) => {\n      // Get the id and chat\n      const id = request.body.id;\n      const chat = cloneDeep(request.body.chat);\n      // Prepare the updated chat\n      let updatedChat = null;\n      // Find the chat and update it\n      this._chats.forEach((item, index, chats) => {\n        if (item.id === id) {\n          // Update the chat\n          chats[index] = assign({}, chats[index], chat);\n          // Store the updated chat\n          updatedChat = chats[index];\n        }\n      });\n      // Return the response\n      return [200, updatedChat];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contacts - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/chat/contacts').reply(() => {\n      // Clone the contacts\n      let contacts = cloneDeep(this._contacts);\n      // Sort the contacts by the name field by default\n      contacts.sort((a, b) => a.name.localeCompare(b.name));\n      // Omit details and attachments from contacts\n      contacts = contacts.map(contact => omit(contact, ['details', 'attachments']));\n      // Return the response\n      return [200, contacts];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contact Details - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/chat/contact').reply(({\n      request\n    }) => {\n      // Get the contact id\n      const id = request.params.get('id');\n      // Clone the contacts\n      const contacts = cloneDeep(this._contacts);\n      // Find the contact\n      const contact = contacts.find(item => item.id === id);\n      // Return the response\n      return [200, contact];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Profile - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/chat/profile').reply(() => {\n      // Clone the profile\n      const profile = cloneDeep(this._profile);\n      // Return the response\n      return [200, profile];\n    });\n  }\n}\nChatMockApi.ɵfac = function ChatMockApi_Factory(t) {\n  return new (t || ChatMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n};\nChatMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatMockApi,\n  factory: ChatMockApi.ɵfac,\n  providedIn: 'root'\n});\nexport { ChatMockApi };","map":{"version":3,"names":["assign","cloneDeep","omit","chats","chatsData","contacts","contactsData","messages","messagesData","profile","profileData","ChatMockApi","constructor","_fuseMockApiService","_chats","_contacts","_messages","_profile","registerHandlers","map","chat","contact","find","id","contactId","message","chatId","isMine","onGet","reply","request","params","get","item","onPatch","body","updatedChat","forEach","index","sort","a","b","name","localeCompare","i0","ɵɵinject","i1","FuseMockApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\mock-api\\apps\\chat\\api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { assign, cloneDeep, omit } from 'lodash-es';\r\nimport { FuseMockApiService } from '@fuse/lib/mock-api';\r\nimport { chats as chatsData, contacts as contactsData, messages as messagesData, profile as profileData } from 'app/mock-api/apps/chat/data';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ChatMockApi\r\n{\r\n    private _chats: any[] = chatsData;\r\n    private _contacts: any[] = contactsData;\r\n    private _messages: any[] = messagesData;\r\n    private _profile: any = profileData;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _fuseMockApiService: FuseMockApiService)\r\n    {\r\n        // Register Mock API handlers\r\n        this.registerHandlers();\r\n\r\n        // Modify the chats array to attach certain data to it\r\n        this._chats = this._chats.map(chat => ({\r\n            ...chat,\r\n            // Get the actual contact object from the id and attach it to the chat\r\n            contact: this._contacts.find(contact => contact.id === chat.contactId),\r\n            // Since we use same set of messages on all chats, we assign them here.\r\n            messages: this._messages.map(message => ({\r\n                ...message,\r\n                chatId   : chat.id,\r\n                contactId: message.contactId === 'me' ? this._profile.id : chat.contactId,\r\n                isMine   : message.contactId === 'me'\r\n            }))\r\n        }));\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register Mock API handlers\r\n     */\r\n    registerHandlers(): void\r\n    {\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Chats - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/chat/chats')\r\n            .reply(() => {\r\n\r\n                // Clone the chats\r\n                const chats = cloneDeep(this._chats);\r\n\r\n                // Return the response\r\n                return [200, chats];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Chat - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/chat/chat')\r\n            .reply(({request}) => {\r\n\r\n                // Get the chat id\r\n                const id = request.params.get('id');\r\n\r\n                // Clone the chats\r\n                const chats = cloneDeep(this._chats);\r\n\r\n                // Find the chat we need\r\n                const chat = chats.find(item => item.id === id);\r\n\r\n                // Return the response\r\n                return [200, chat];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Chat - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/apps/chat/chat')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and chat\r\n                const id = request.body.id;\r\n                const chat = cloneDeep(request.body.chat);\r\n\r\n                // Prepare the updated chat\r\n                let updatedChat = null;\r\n\r\n                // Find the chat and update it\r\n                this._chats.forEach((item, index, chats) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        // Update the chat\r\n                        chats[index] = assign({}, chats[index], chat);\r\n\r\n                        // Store the updated chat\r\n                        updatedChat = chats[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedChat];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contacts - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/chat/contacts')\r\n            .reply(() => {\r\n\r\n                // Clone the contacts\r\n                let contacts = cloneDeep(this._contacts);\r\n\r\n                // Sort the contacts by the name field by default\r\n                contacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n                // Omit details and attachments from contacts\r\n                contacts = contacts.map(contact => omit(contact, ['details', 'attachments']));\r\n\r\n                // Return the response\r\n                return [200, contacts];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contact Details - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/chat/contact')\r\n            .reply(({request}) => {\r\n\r\n                // Get the contact id\r\n                const id = request.params.get('id');\r\n\r\n                // Clone the contacts\r\n                const contacts = cloneDeep(this._contacts);\r\n\r\n                // Find the contact\r\n                const contact = contacts.find(item => item.id === id);\r\n\r\n                // Return the response\r\n                return [200, contact];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Profile - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/chat/profile')\r\n            .reply(() => {\r\n\r\n                // Clone the profile\r\n                const profile = cloneDeep(this._profile);\r\n\r\n                // Return the response\r\n                return [200, profile];\r\n            });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}