{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n * Finds an object from given source using the given key - value pairs\n */\nclass FuseFindByKeyPipe {\n  /**\n   * Constructor\n   */\n  constructor() {}\n  /**\n   * Transform\n   *\n   * @param value A string or an array of strings to find from source\n   * @param key Key of the object property to look for\n   * @param source Array of objects to find from\n   */\n  transform(value, key, source) {\n    // If the given value is an array of strings...\n    if (Array.isArray(value)) {\n      return value.map(item => source.find(sourceItem => sourceItem[key] === item));\n    }\n    // If the value is a string...\n    return source.find(sourceItem => sourceItem[key] === value);\n  }\n  static #_ = this.ɵfac = function FuseFindByKeyPipe_Factory(t) {\n    return new (t || FuseFindByKeyPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"fuseFindByKey\",\n    type: FuseFindByKeyPipe,\n    pure: false\n  });\n}\nexport { FuseFindByKeyPipe };","map":{"version":3,"names":["FuseFindByKeyPipe","constructor","transform","value","key","source","Array","isArray","map","item","find","sourceItem","_","_2","pure"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\@fuse\\pipes\\find-by-key\\find-by-key.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * Finds an object from given source using the given key - value pairs\r\n */\r\n@Pipe({\r\n    name: 'fuseFindByKey',\r\n    pure: false\r\n})\r\nexport class FuseFindByKeyPipe implements PipeTransform\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Transform\r\n     *\r\n     * @param value A string or an array of strings to find from source\r\n     * @param key Key of the object property to look for\r\n     * @param source Array of objects to find from\r\n     */\r\n    transform(value: string | string[], key: string, source: any[]): any\r\n    {\r\n        // If the given value is an array of strings...\r\n        if ( Array.isArray(value) )\r\n        {\r\n            return value.map(item => source.find(sourceItem => sourceItem[key] === item));\r\n        }\r\n\r\n        // If the value is a string...\r\n        return source.find(sourceItem => sourceItem[key] === value);\r\n    }\r\n}\r\n"],"mappings":";AAEA;;;AAGA,MAIaA,iBAAiB;EAE1B;;;EAGAC,YAAA,GAEA;EAEA;;;;;;;EAOAC,SAASA,CAACC,KAAwB,EAAEC,GAAW,EAAEC,MAAa;IAE1D;IACA,IAAKC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EACzB;MACI,OAAOA,KAAK,CAACK,GAAG,CAACC,IAAI,IAAIJ,MAAM,CAACK,IAAI,CAACC,UAAU,IAAIA,UAAU,CAACP,GAAG,CAAC,KAAKK,IAAI,CAAC,CAAC;;IAGjF;IACA,OAAOJ,MAAM,CAACK,IAAI,CAACC,UAAU,IAAIA,UAAU,CAACP,GAAG,CAAC,KAAKD,KAAK,CAAC;EAC/D;EAAC,QAAAS,CAAA,G;qBA1BQZ,iBAAiB;EAAA;EAAA,QAAAa,EAAA,G;;UAAjBb,iBAAiB;IAAAc,IAAA;EAAA;;SAAjBd,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}