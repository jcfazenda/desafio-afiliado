{"ast":null,"code":"import { map, ReplaySubject, switchMap, take, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass NotificationsService {\n  /**\n   * Constructor\n   */\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this._notifications = new ReplaySubject(1);\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for notifications\n   */\n  get notifications$() {\n    return this._notifications.asObservable();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get all notifications\n   */\n  getAll() {\n    return this._httpClient.get('api/common/notifications').pipe(tap(notifications => {\n      this._notifications.next(notifications);\n    }));\n  }\n  /**\n   * Create a notification\n   *\n   * @param notification\n   */\n  create(notification) {\n    return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.post('api/common/notifications', {\n      notification\n    }).pipe(map(newNotification => {\n      // Update the notifications with the new notification\n      this._notifications.next([...notifications, newNotification]);\n      // Return the new notification from observable\n      return newNotification;\n    }))));\n  }\n  /**\n   * Update the notification\n   *\n   * @param id\n   * @param notification\n   */\n  update(id, notification) {\n    return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.patch('api/common/notifications', {\n      id,\n      notification\n    }).pipe(map(updatedNotification => {\n      // Find the index of the updated notification\n      const index = notifications.findIndex(item => item.id === id);\n      // Update the notification\n      notifications[index] = updatedNotification;\n      // Update the notifications\n      this._notifications.next(notifications);\n      // Return the updated notification\n      return updatedNotification;\n    }))));\n  }\n  /**\n   * Delete the notification\n   *\n   * @param id\n   */\n  delete(id) {\n    return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.delete('api/common/notifications', {\n      params: {\n        id\n      }\n    }).pipe(map(isDeleted => {\n      // Find the index of the deleted notification\n      const index = notifications.findIndex(item => item.id === id);\n      // Delete the notification\n      notifications.splice(index, 1);\n      // Update the notifications\n      this._notifications.next(notifications);\n      // Return the deleted status\n      return isDeleted;\n    }))));\n  }\n  /**\n   * Mark all notifications as read\n   */\n  markAllAsRead() {\n    return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.get('api/common/notifications/mark-all-as-read').pipe(map(isUpdated => {\n      // Go through all notifications and set them as read\n      notifications.forEach((notification, index) => {\n        notifications[index].read = true;\n      });\n      // Update the notifications\n      this._notifications.next(notifications);\n      // Return the updated status\n      return isUpdated;\n    }))));\n  }\n}\nNotificationsService.ɵfac = function NotificationsService_Factory(t) {\n  return new (t || NotificationsService)(i0.ɵɵinject(i1.HttpClient));\n};\nNotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotificationsService,\n  factory: NotificationsService.ɵfac,\n  providedIn: 'root'\n});\nexport { NotificationsService };","map":{"version":3,"names":["map","ReplaySubject","switchMap","take","tap","NotificationsService","constructor","_httpClient","_notifications","notifications$","asObservable","getAll","get","pipe","notifications","next","create","notification","post","newNotification","update","id","patch","updatedNotification","index","findIndex","item","delete","params","isDeleted","splice","markAllAsRead","isUpdated","forEach","read","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\layout\\common\\notifications\\notifications.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable, ReplaySubject, switchMap, take, tap } from 'rxjs';\r\nimport { Notification } from 'app/layout/common/notifications/notifications.types';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NotificationsService\r\n{\r\n    private _notifications: ReplaySubject<Notification[]> = new ReplaySubject<Notification[]>(1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _httpClient: HttpClient)\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Getter for notifications\r\n     */\r\n    get notifications$(): Observable<Notification[]>\r\n    {\r\n        return this._notifications.asObservable();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get all notifications\r\n     */\r\n    getAll(): Observable<Notification[]>\r\n    {\r\n        return this._httpClient.get<Notification[]>('api/common/notifications').pipe(\r\n            tap((notifications) => {\r\n                this._notifications.next(notifications);\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a notification\r\n     *\r\n     * @param notification\r\n     */\r\n    create(notification: Notification): Observable<Notification>\r\n    {\r\n        return this.notifications$.pipe(\r\n            take(1),\r\n            switchMap(notifications => this._httpClient.post<Notification>('api/common/notifications', {notification}).pipe(\r\n                map((newNotification) => {\r\n\r\n                    // Update the notifications with the new notification\r\n                    this._notifications.next([...notifications, newNotification]);\r\n\r\n                    // Return the new notification from observable\r\n                    return newNotification;\r\n                })\r\n            ))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the notification\r\n     *\r\n     * @param id\r\n     * @param notification\r\n     */\r\n    update(id: string, notification: Notification): Observable<Notification>\r\n    {\r\n        return this.notifications$.pipe(\r\n            take(1),\r\n            switchMap(notifications => this._httpClient.patch<Notification>('api/common/notifications', {\r\n                id,\r\n                notification\r\n            }).pipe(\r\n                map((updatedNotification: Notification) => {\r\n\r\n                    // Find the index of the updated notification\r\n                    const index = notifications.findIndex(item => item.id === id);\r\n\r\n                    // Update the notification\r\n                    notifications[index] = updatedNotification;\r\n\r\n                    // Update the notifications\r\n                    this._notifications.next(notifications);\r\n\r\n                    // Return the updated notification\r\n                    return updatedNotification;\r\n                })\r\n            ))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete the notification\r\n     *\r\n     * @param id\r\n     */\r\n    delete(id: string): Observable<boolean>\r\n    {\r\n        return this.notifications$.pipe(\r\n            take(1),\r\n            switchMap(notifications => this._httpClient.delete<boolean>('api/common/notifications', {params: {id}}).pipe(\r\n                map((isDeleted: boolean) => {\r\n\r\n                    // Find the index of the deleted notification\r\n                    const index = notifications.findIndex(item => item.id === id);\r\n\r\n                    // Delete the notification\r\n                    notifications.splice(index, 1);\r\n\r\n                    // Update the notifications\r\n                    this._notifications.next(notifications);\r\n\r\n                    // Return the deleted status\r\n                    return isDeleted;\r\n                })\r\n            ))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Mark all notifications as read\r\n     */\r\n    markAllAsRead(): Observable<boolean>\r\n    {\r\n        return this.notifications$.pipe(\r\n            take(1),\r\n            switchMap(notifications => this._httpClient.get<boolean>('api/common/notifications/mark-all-as-read').pipe(\r\n                map((isUpdated: boolean) => {\r\n\r\n                    // Go through all notifications and set them as read\r\n                    notifications.forEach((notification, index) => {\r\n                        notifications[index].read = true;\r\n                    });\r\n\r\n                    // Update the notifications\r\n                    this._notifications.next(notifications);\r\n\r\n                    // Return the updated status\r\n                    return isUpdated;\r\n                })\r\n            ))\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,EAAcC,aAAa,EAAEC,SAAS,EAAEC,IAAI,EAAEC,GAAG,QAAQ,MAAM;;;AAG3E,MAGaC,oBAAoB;EAI7B;;;EAGAC,YAAoBC,WAAuB;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IALvB,KAAAC,cAAc,GAAkC,IAAIP,aAAa,CAAiB,CAAC,CAAC;EAO5F;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIQ,cAAcA,CAAA;IAEd,OAAO,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;EAC7C;EAEA;EACA;EACA;EAEA;;;EAGAC,MAAMA,CAAA;IAEF,OAAO,IAAI,CAACJ,WAAW,CAACK,GAAG,CAAiB,0BAA0B,CAAC,CAACC,IAAI,CACxET,GAAG,CAAEU,aAAa,IAAI;MAClB,IAAI,CAACN,cAAc,CAACO,IAAI,CAACD,aAAa,CAAC;IAC3C,CAAC,CAAC,CACL;EACL;EAEA;;;;;EAKAE,MAAMA,CAACC,YAA0B;IAE7B,OAAO,IAAI,CAACR,cAAc,CAACI,IAAI,CAC3BV,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAACY,aAAa,IAAI,IAAI,CAACP,WAAW,CAACW,IAAI,CAAe,0BAA0B,EAAE;MAACD;IAAY,CAAC,CAAC,CAACJ,IAAI,CAC3Gb,GAAG,CAAEmB,eAAe,IAAI;MAEpB;MACA,IAAI,CAACX,cAAc,CAACO,IAAI,CAAC,CAAC,GAAGD,aAAa,EAAEK,eAAe,CAAC,CAAC;MAE7D;MACA,OAAOA,eAAe;IAC1B,CAAC,CAAC,CACL,CAAC,CACL;EACL;EAEA;;;;;;EAMAC,MAAMA,CAACC,EAAU,EAAEJ,YAA0B;IAEzC,OAAO,IAAI,CAACR,cAAc,CAACI,IAAI,CAC3BV,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAACY,aAAa,IAAI,IAAI,CAACP,WAAW,CAACe,KAAK,CAAe,0BAA0B,EAAE;MACxFD,EAAE;MACFJ;KACH,CAAC,CAACJ,IAAI,CACHb,GAAG,CAAEuB,mBAAiC,IAAI;MAEtC;MACA,MAAMC,KAAK,GAAGV,aAAa,CAACW,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC;MAE7D;MACAP,aAAa,CAACU,KAAK,CAAC,GAAGD,mBAAmB;MAE1C;MACA,IAAI,CAACf,cAAc,CAACO,IAAI,CAACD,aAAa,CAAC;MAEvC;MACA,OAAOS,mBAAmB;IAC9B,CAAC,CAAC,CACL,CAAC,CACL;EACL;EAEA;;;;;EAKAI,MAAMA,CAACN,EAAU;IAEb,OAAO,IAAI,CAACZ,cAAc,CAACI,IAAI,CAC3BV,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAACY,aAAa,IAAI,IAAI,CAACP,WAAW,CAACoB,MAAM,CAAU,0BAA0B,EAAE;MAACC,MAAM,EAAE;QAACP;MAAE;IAAC,CAAC,CAAC,CAACR,IAAI,CACxGb,GAAG,CAAE6B,SAAkB,IAAI;MAEvB;MACA,MAAML,KAAK,GAAGV,aAAa,CAACW,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC;MAE7D;MACAP,aAAa,CAACgB,MAAM,CAACN,KAAK,EAAE,CAAC,CAAC;MAE9B;MACA,IAAI,CAAChB,cAAc,CAACO,IAAI,CAACD,aAAa,CAAC;MAEvC;MACA,OAAOe,SAAS;IACpB,CAAC,CAAC,CACL,CAAC,CACL;EACL;EAEA;;;EAGAE,aAAaA,CAAA;IAET,OAAO,IAAI,CAACtB,cAAc,CAACI,IAAI,CAC3BV,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAACY,aAAa,IAAI,IAAI,CAACP,WAAW,CAACK,GAAG,CAAU,2CAA2C,CAAC,CAACC,IAAI,CACtGb,GAAG,CAAEgC,SAAkB,IAAI;MAEvB;MACAlB,aAAa,CAACmB,OAAO,CAAC,CAAChB,YAAY,EAAEO,KAAK,KAAI;QAC1CV,aAAa,CAACU,KAAK,CAAC,CAACU,IAAI,GAAG,IAAI;MACpC,CAAC,CAAC;MAEF;MACA,IAAI,CAAC1B,cAAc,CAACO,IAAI,CAACD,aAAa,CAAC;MAEvC;MACA,OAAOkB,SAAS;IACpB,CAAC,CAAC,CACL,CAAC,CACL;EACL;;AAhJS3B,oBAAoB,C;mBAApBA,oBAAoB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAApBjC,oBAAoB,C;SAApBA,oBAAoB;EAAAkC,OAAA,EAApBlC,oBAAoB,CAAAmC,IAAA;EAAAC,UAAA,EAFjB;AAAM;SAETpC,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}