{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/platform\";\nclass FusePlatformService {\n  /**\n   * Constructor\n   */\n  constructor(_platform) {\n    this._platform = _platform;\n    this.osName = 'os-unknown';\n    // If the platform is not a browser, return immediately\n    if (!this._platform.isBrowser) {\n      return;\n    }\n    // Windows\n    if (navigator.userAgent.includes('Win')) {\n      this.osName = 'os-windows';\n    }\n    // Mac OS\n    if (navigator.userAgent.includes('Mac')) {\n      this.osName = 'os-mac';\n    }\n    // Unix\n    if (navigator.userAgent.includes('X11')) {\n      this.osName = 'os-unix';\n    }\n    // Linux\n    if (navigator.userAgent.includes('Linux')) {\n      this.osName = 'os-linux';\n    }\n    // iOS\n    if (this._platform.IOS) {\n      this.osName = 'os-ios';\n    }\n    // Android\n    if (this._platform.ANDROID) {\n      this.osName = 'os-android';\n    }\n  }\n  static #_ = this.ɵfac = function FusePlatformService_Factory(t) {\n    return new (t || FusePlatformService)(i0.ɵɵinject(i1.Platform));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FusePlatformService,\n    factory: FusePlatformService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FusePlatformService };","map":{"version":3,"names":["FusePlatformService","constructor","_platform","osName","isBrowser","navigator","userAgent","includes","IOS","ANDROID","_","i0","ɵɵinject","i1","Platform","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\@fuse\\services\\platform\\platform.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Platform } from '@angular/cdk/platform';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FusePlatformService\r\n{\r\n    osName = 'os-unknown';\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _platform: Platform)\r\n    {\r\n        // If the platform is not a browser, return immediately\r\n        if ( !this._platform.isBrowser )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Windows\r\n        if ( navigator.userAgent.includes('Win') )\r\n        {\r\n            this.osName = 'os-windows';\r\n        }\r\n\r\n        // Mac OS\r\n        if ( navigator.userAgent.includes('Mac') )\r\n        {\r\n            this.osName = 'os-mac';\r\n        }\r\n\r\n        // Unix\r\n        if ( navigator.userAgent.includes('X11') )\r\n        {\r\n            this.osName = 'os-unix';\r\n        }\r\n\r\n        // Linux\r\n        if ( navigator.userAgent.includes('Linux') )\r\n        {\r\n            this.osName = 'os-linux';\r\n        }\r\n\r\n        // iOS\r\n        if ( this._platform.IOS )\r\n        {\r\n            this.osName = 'os-ios';\r\n        }\r\n\r\n        // Android\r\n        if ( this._platform.ANDROID )\r\n        {\r\n            this.osName = 'os-android';\r\n        }\r\n    }\r\n\r\n}\r\n"],"mappings":";;AAGA,MAGaA,mBAAmB;EAI5B;;;EAGAC,YAAoBC,SAAmB;IAAnB,KAAAA,SAAS,GAATA,SAAS;IAL7B,KAAAC,MAAM,GAAG,YAAY;IAOjB;IACA,IAAK,CAAC,IAAI,CAACD,SAAS,CAACE,SAAS,EAC9B;MACI;;IAGJ;IACA,IAAKC,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,KAAK,CAAC,EACxC;MACI,IAAI,CAACJ,MAAM,GAAG,YAAY;;IAG9B;IACA,IAAKE,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,KAAK,CAAC,EACxC;MACI,IAAI,CAACJ,MAAM,GAAG,QAAQ;;IAG1B;IACA,IAAKE,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,KAAK,CAAC,EACxC;MACI,IAAI,CAACJ,MAAM,GAAG,SAAS;;IAG3B;IACA,IAAKE,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,OAAO,CAAC,EAC1C;MACI,IAAI,CAACJ,MAAM,GAAG,UAAU;;IAG5B;IACA,IAAK,IAAI,CAACD,SAAS,CAACM,GAAG,EACvB;MACI,IAAI,CAACL,MAAM,GAAG,QAAQ;;IAG1B;IACA,IAAK,IAAI,CAACD,SAAS,CAACO,OAAO,EAC3B;MACI,IAAI,CAACN,MAAM,GAAG,YAAY;;EAElC;EAAC,QAAAO,CAAA,G;qBAlDQV,mBAAmB,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,QAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBf,mBAAmB;IAAAgB,OAAA,EAAnBhB,mBAAmB,CAAAiB,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAETlB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}