{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/components/navigation\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/menu\";\nimport * as i5 from \"@angular/common\";\nfunction LanguagesComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction LanguagesComponent_ng_container_4_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction LanguagesComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function LanguagesComponent_ng_container_4_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const lang_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.setActiveLang(lang_r5.id));\n    });\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtemplate(3, LanguagesComponent_ng_container_4_ng_container_3_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementStart(4, \"span\", 8);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const lang_r5 = ctx.$implicit;\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(6);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c0, lang_r5.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(lang_r5.label);\n  }\n}\nfunction LanguagesComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵelement(1, \"span\", 10)(2, \"img\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const lang_r9 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", \"assets/images/flags/\" + ctx_r4.flagCodes[lang_r9].toUpperCase() + \".svg\", i0.ɵɵsanitizeUrl)(\"alt\", \"Flag image for \" + lang_r9);\n  }\n}\nclass LanguagesComponent {\n  /**\n   * Constructor\n   */\n  constructor(_changeDetectorRef, _fuseNavigationService, _translocoService) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._fuseNavigationService = _fuseNavigationService;\n    this._translocoService = _translocoService;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Lifecycle hooks\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On init\n   */\n  ngOnInit() {\n    // Get the available languages from transloco\n    this.availableLangs = this._translocoService.getAvailableLangs();\n    // Subscribe to language changes\n    this._translocoService.langChanges$.subscribe(activeLang => {\n      // Get the active lang\n      this.activeLang = activeLang;\n      // Update the navigation\n      this._updateNavigation(activeLang);\n    });\n    // Set the country iso codes for languages for flags\n    this.flagCodes = {\n      'en': 'us',\n      'tr': 'tr'\n    };\n  }\n  /**\n   * On destroy\n   */\n  ngOnDestroy() {}\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Set the active lang\n   *\n   * @param lang\n   */\n  setActiveLang(lang) {\n    // Set the active lang\n    this._translocoService.setActiveLang(lang);\n  }\n  /**\n   * Track by function for ngFor loops\n   *\n   * @param index\n   * @param item\n   */\n  trackByFn(index, item) {\n    return item.id || index;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Update the navigation\n   *\n   * @param lang\n   * @private\n   */\n  _updateNavigation(lang) {\n    // For the demonstration purposes, we will only update the Dashboard names\n    // from the navigation but you can do a full swap and change the entire\n    // navigation data.\n    //\n    // You can import the data from a file or request it from your backend,\n    // it's up to you.\n    // Get the component -> navigation data -> item\n    const navComponent = this._fuseNavigationService.getComponent('mainNavigation');\n    // Return if the navigation component does not exist\n    if (!navComponent) {\n      return null;\n    }\n    // Get the flat navigation data\n    const navigation = navComponent.navigation;\n    // Get the Project dashboard item and update its title\n    const projectDashboardItem = this._fuseNavigationService.getItem('dashboards.project', navigation);\n    if (projectDashboardItem) {\n      this._translocoService.selectTranslate('Project').pipe(take(1)).subscribe(translation => {\n        // Set the title\n        projectDashboardItem.title = translation;\n        // Refresh the navigation component\n        navComponent.refresh();\n      });\n    }\n    // Get the Analytics dashboard item and update its title\n    const analyticsDashboardItem = this._fuseNavigationService.getItem('dashboards.analytics', navigation);\n    if (analyticsDashboardItem) {\n      this._translocoService.selectTranslate('Analytics').pipe(take(1)).subscribe(translation => {\n        // Set the title\n        analyticsDashboardItem.title = translation;\n        // Refresh the navigation component\n        navComponent.refresh();\n      });\n    }\n  }\n}\nLanguagesComponent.ɵfac = function LanguagesComponent_Factory(t) {\n  return new (t || LanguagesComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FuseNavigationService), i0.ɵɵdirectiveInject(i2.TranslocoService));\n};\nLanguagesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LanguagesComponent,\n  selectors: [[\"languages\"]],\n  exportAs: [\"languages\"],\n  decls: 7,\n  vars: 8,\n  consts: [[\"mat-icon-button\", \"\", 3, \"matMenuTriggerFor\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"xPosition\"], [\"languages\", \"matMenu\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"flagImage\", \"\"], [\"mat-menu-item\", \"\", 3, \"click\"], [1, \"flex\", \"items-center\"], [1, \"ml-3\"], [1, \"relative\", \"w-6\", \"shadow\", \"rounded-sm\", \"overflow-hidden\"], [1, \"absolute\", \"inset-0\", \"ring-1\", \"ring-inset\", \"ring-black\", \"ring-opacity-10\"], [1, \"w-full\", 3, \"src\", \"alt\"]],\n  template: function LanguagesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵtemplate(1, LanguagesComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"mat-menu\", 2, 3);\n      i0.ɵɵtemplate(4, LanguagesComponent_ng_container_4_Template, 6, 5, \"ng-container\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, LanguagesComponent_ng_template_5_Template, 3, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(3);\n      const _r3 = i0.ɵɵreference(6);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c0, ctx.activeLang));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xPosition\", \"before\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.availableLangs)(\"ngForTrackBy\", ctx.trackByFn);\n    }\n  },\n  dependencies: [i3.MatIconButton, i4.MatMenu, i4.MatMenuItem, i4.MatMenuTrigger, i5.NgForOf, i5.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\nexport { LanguagesComponent };","map":{"version":3,"names":["take","i0","ɵɵelementContainer","ɵɵelementContainerStart","ɵɵelementStart","ɵɵlistener","LanguagesComponent_ng_container_4_Template_button_click_1_listener","restoredCtx","ɵɵrestoreView","_r8","lang_r5","$implicit","ctx_r7","ɵɵnextContext","ɵɵresetView","setActiveLang","id","ɵɵtemplate","LanguagesComponent_ng_container_4_ng_container_3_Template","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","_r3","ɵɵpureFunction1","_c0","ɵɵtextInterpolate","label","ɵɵelement","ctx_r4","flagCodes","lang_r9","toUpperCase","ɵɵsanitizeUrl","LanguagesComponent","constructor","_changeDetectorRef","_fuseNavigationService","_translocoService","ngOnInit","availableLangs","getAvailableLangs","langChanges$","subscribe","activeLang","_updateNavigation","ngOnDestroy","lang","trackByFn","index","item","navComponent","getComponent","navigation","projectDashboardItem","getItem","selectTranslate","pipe","translation","title","refresh","analyticsDashboardItem","ɵɵdirectiveInject","ChangeDetectorRef","i1","FuseNavigationService","i2","TranslocoService","selectors","exportAs","decls","vars","consts","template","LanguagesComponent_Template","rf","ctx","LanguagesComponent_ng_container_1_Template","LanguagesComponent_ng_container_4_Template","LanguagesComponent_ng_template_5_Template","ɵɵtemplateRefExtractor","_r1"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\layout\\common\\languages\\languages.component.ts","C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\layout\\common\\languages\\languages.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { take } from 'rxjs';\r\nimport { AvailableLangs, TranslocoService } from '@ngneat/transloco';\r\nimport { FuseNavigationService, FuseVerticalNavigationComponent } from '@fuse/components/navigation';\r\n\r\n@Component({\r\n    selector       : 'languages',\r\n    templateUrl    : './languages.component.html',\r\n    encapsulation  : ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    exportAs       : 'languages'\r\n})\r\nexport class LanguagesComponent implements OnInit, OnDestroy\r\n{\r\n    availableLangs: AvailableLangs;\r\n    activeLang: string;\r\n    flagCodes: any;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _changeDetectorRef: ChangeDetectorRef,\r\n        private _fuseNavigationService: FuseNavigationService,\r\n        private _translocoService: TranslocoService\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        // Get the available languages from transloco\r\n        this.availableLangs = this._translocoService.getAvailableLangs();\r\n\r\n        // Subscribe to language changes\r\n        this._translocoService.langChanges$.subscribe((activeLang) => {\r\n\r\n            // Get the active lang\r\n            this.activeLang = activeLang;\r\n\r\n            // Update the navigation\r\n            this._updateNavigation(activeLang);\r\n        });\r\n\r\n        // Set the country iso codes for languages for flags\r\n        this.flagCodes = {\r\n            'en': 'us',\r\n            'tr': 'tr'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Set the active lang\r\n     *\r\n     * @param lang\r\n     */\r\n    setActiveLang(lang: string): void\r\n    {\r\n        // Set the active lang\r\n        this._translocoService.setActiveLang(lang);\r\n    }\r\n\r\n    /**\r\n     * Track by function for ngFor loops\r\n     *\r\n     * @param index\r\n     * @param item\r\n     */\r\n    trackByFn(index: number, item: any): any\r\n    {\r\n        return item.id || index;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Update the navigation\r\n     *\r\n     * @param lang\r\n     * @private\r\n     */\r\n    private _updateNavigation(lang: string): void\r\n    {\r\n        // For the demonstration purposes, we will only update the Dashboard names\r\n        // from the navigation but you can do a full swap and change the entire\r\n        // navigation data.\r\n        //\r\n        // You can import the data from a file or request it from your backend,\r\n        // it's up to you.\r\n\r\n        // Get the component -> navigation data -> item\r\n        const navComponent = this._fuseNavigationService.getComponent<FuseVerticalNavigationComponent>('mainNavigation');\r\n\r\n        // Return if the navigation component does not exist\r\n        if ( !navComponent )\r\n        {\r\n            return null;\r\n        }\r\n\r\n        // Get the flat navigation data\r\n        const navigation = navComponent.navigation;\r\n\r\n        // Get the Project dashboard item and update its title\r\n        const projectDashboardItem = this._fuseNavigationService.getItem('dashboards.project', navigation);\r\n        if ( projectDashboardItem )\r\n        {\r\n            this._translocoService.selectTranslate('Project').pipe(take(1))\r\n                .subscribe((translation) => {\r\n\r\n                    // Set the title\r\n                    projectDashboardItem.title = translation;\r\n\r\n                    // Refresh the navigation component\r\n                    navComponent.refresh();\r\n                });\r\n        }\r\n\r\n        // Get the Analytics dashboard item and update its title\r\n        const analyticsDashboardItem = this._fuseNavigationService.getItem('dashboards.analytics', navigation);\r\n        if ( analyticsDashboardItem )\r\n        {\r\n            this._translocoService.selectTranslate('Analytics').pipe(take(1))\r\n                .subscribe((translation) => {\r\n\r\n                    // Set the title\r\n                    analyticsDashboardItem.title = translation;\r\n\r\n                    // Refresh the navigation component\r\n                    navComponent.refresh();\r\n                });\r\n        }\r\n    }\r\n}\r\n","<!-- Button -->\r\n<button\r\n    mat-icon-button\r\n    [matMenuTriggerFor]=\"languages\">\r\n    <ng-container *ngTemplateOutlet=\"flagImage; context: {$implicit: activeLang}\"></ng-container>\r\n</button>\r\n\r\n<!-- Language menu -->\r\n<mat-menu\r\n    [xPosition]=\"'before'\"\r\n    #languages=\"matMenu\">\r\n    <ng-container *ngFor=\"let lang of availableLangs; trackBy: trackByFn\">\r\n        <button\r\n            mat-menu-item\r\n            (click)=\"setActiveLang(lang.id)\">\r\n            <span class=\"flex items-center\">\r\n                <ng-container *ngTemplateOutlet=\"flagImage; context: {$implicit: lang.id}\"></ng-container>\r\n                <span class=\"ml-3\">{{lang.label}}</span>\r\n            </span>\r\n        </button>\r\n    </ng-container>\r\n</mat-menu>\r\n\r\n<!-- Flag image template -->\r\n<ng-template\r\n    let-lang\r\n    #flagImage>\r\n    <span class=\"relative w-6 shadow rounded-sm overflow-hidden\">\r\n        <span class=\"absolute inset-0 ring-1 ring-inset ring-black ring-opacity-10\"></span>\r\n        <img\r\n            class=\"w-full\"\r\n            [src]=\"'assets/images/flags/' + flagCodes[lang].toUpperCase() + '.svg'\"\r\n            [alt]=\"'Flag image for ' + lang\">\r\n    </span>\r\n</ng-template>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}