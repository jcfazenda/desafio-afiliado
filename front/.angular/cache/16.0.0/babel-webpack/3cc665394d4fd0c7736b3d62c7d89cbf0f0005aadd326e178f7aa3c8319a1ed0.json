{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { notifications as notificationsData } from 'app/mock-api/common/notifications/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nclass NotificationsMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._notifications = notificationsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notifications - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/notifications').reply(() => [200, cloneDeep(this._notifications)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notifications - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/notifications').reply(({\n      request\n    }) => {\n      // Get the notification\n      const newNotification = cloneDeep(request.body.notification);\n      // Generate a new GUID\n      newNotification.id = FuseMockApiUtils.guid();\n      // Unshift the new notification\n      this._notifications.unshift(newNotification);\n      // Return the response\n      return [200, newNotification];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notifications - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/common/notifications').reply(({\n      request\n    }) => {\n      // Get the id and notification\n      const id = request.body.id;\n      const notification = cloneDeep(request.body.notification);\n      // Prepare the updated notification\n      let updatedNotification = null;\n      // Find the notification and update it\n      this._notifications.forEach((item, index, notifications) => {\n        if (item.id === id) {\n          // Update the notification\n          notifications[index] = assign({}, notifications[index], notification);\n          // Store the updated notification\n          updatedNotification = notifications[index];\n        }\n      });\n      // Return the response\n      return [200, updatedNotification];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Notifications - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/common/notifications').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Prepare the deleted notification\n      let deletedNotification = null;\n      // Find the notification\n      const index = this._notifications.findIndex(item => item.id === id);\n      // Store the deleted notification\n      deletedNotification = cloneDeep(this._notifications[index]);\n      // Delete the notification\n      this._notifications.splice(index, 1);\n      // Return the response\n      return [200, deletedNotification];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Mark all as read - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/notifications/mark-all-as-read').reply(() => {\n      // Go through all notifications\n      this._notifications.forEach((item, index, notifications) => {\n        // Mark it as read\n        notifications[index].read = true;\n        notifications[index].seen = true;\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Toggle read status - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/notifications/toggle-read-status').reply(({\n      request\n    }) => {\n      // Get the notification\n      const notification = cloneDeep(request.body.notification);\n      // Prepare the updated notification\n      let updatedNotification = null;\n      // Find the notification and update it\n      this._notifications.forEach((item, index, notifications) => {\n        if (item.id === notification.id) {\n          // Update the notification\n          notifications[index].read = notification.read;\n          // Store the updated notification\n          updatedNotification = notifications[index];\n        }\n      });\n      // Return the response\n      return [200, updatedNotification];\n    });\n  }\n}\nNotificationsMockApi.ɵfac = function NotificationsMockApi_Factory(t) {\n  return new (t || NotificationsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n};\nNotificationsMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotificationsMockApi,\n  factory: NotificationsMockApi.ɵfac,\n  providedIn: 'root'\n});\nexport { NotificationsMockApi };","map":{"version":3,"names":["assign","cloneDeep","FuseMockApiUtils","notifications","notificationsData","NotificationsMockApi","constructor","_fuseMockApiService","_notifications","registerHandlers","onGet","reply","onPost","request","newNotification","body","notification","id","guid","unshift","onPatch","updatedNotification","forEach","item","index","onDelete","params","get","deletedNotification","findIndex","splice","read","seen","i0","ɵɵinject","i1","FuseMockApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\mock-api\\common\\notifications\\api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { assign, cloneDeep } from 'lodash-es';\r\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\r\nimport { notifications as notificationsData } from 'app/mock-api/common/notifications/data';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NotificationsMockApi\r\n{\r\n    private _notifications: any = notificationsData;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _fuseMockApiService: FuseMockApiService)\r\n    {\r\n        // Register Mock API handlers\r\n        this.registerHandlers();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register Mock API handlers\r\n     */\r\n    registerHandlers(): void\r\n    {\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Notifications - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/common/notifications')\r\n            .reply(() => [200, cloneDeep(this._notifications)]);\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Notifications - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/common/notifications')\r\n            .reply(({request}) => {\r\n\r\n                // Get the notification\r\n                const newNotification = cloneDeep(request.body.notification);\r\n\r\n                // Generate a new GUID\r\n                newNotification.id = FuseMockApiUtils.guid();\r\n\r\n                // Unshift the new notification\r\n                this._notifications.unshift(newNotification);\r\n\r\n                // Return the response\r\n                return [200, newNotification];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Notifications - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/common/notifications')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and notification\r\n                const id = request.body.id;\r\n                const notification = cloneDeep(request.body.notification);\r\n\r\n                // Prepare the updated notification\r\n                let updatedNotification = null;\r\n\r\n                // Find the notification and update it\r\n                this._notifications.forEach((item: any, index: number, notifications: any[]) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        // Update the notification\r\n                        notifications[index] = assign({}, notifications[index], notification);\r\n\r\n                        // Store the updated notification\r\n                        updatedNotification = notifications[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedNotification];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Notifications - DELETE\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onDelete('api/common/notifications')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id\r\n                const id = request.params.get('id');\r\n\r\n                // Prepare the deleted notification\r\n                let deletedNotification = null;\r\n\r\n                // Find the notification\r\n                const index = this._notifications.findIndex((item: any) => item.id === id);\r\n\r\n                // Store the deleted notification\r\n                deletedNotification = cloneDeep(this._notifications[index]);\r\n\r\n                // Delete the notification\r\n                this._notifications.splice(index, 1);\r\n\r\n                // Return the response\r\n                return [200, deletedNotification];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Mark all as read - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/common/notifications/mark-all-as-read')\r\n            .reply(() => {\r\n\r\n                // Go through all notifications\r\n                this._notifications.forEach((item: any, index: number, notifications: any[]) => {\r\n\r\n                    // Mark it as read\r\n                    notifications[index].read = true;\r\n                    notifications[index].seen = true;\r\n                });\r\n\r\n                // Return the response\r\n                return [200, true];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Toggle read status - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/common/notifications/toggle-read-status')\r\n            .reply(({request}) => {\r\n\r\n                // Get the notification\r\n                const notification = cloneDeep(request.body.notification);\r\n\r\n                // Prepare the updated notification\r\n                let updatedNotification = null;\r\n\r\n                // Find the notification and update it\r\n                this._notifications.forEach((item: any, index: number, notifications: any[]) => {\r\n\r\n                    if ( item.id === notification.id )\r\n                    {\r\n                        // Update the notification\r\n                        notifications[index].read = notification.read;\r\n\r\n                        // Store the updated notification\r\n                        updatedNotification = notifications[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedNotification];\r\n            });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}