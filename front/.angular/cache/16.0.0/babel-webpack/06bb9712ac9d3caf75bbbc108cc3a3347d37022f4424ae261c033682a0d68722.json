{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass PathService {\n  constructor(http) {\n    this.http = http;\n    this.endpoint = 'http://localhost:3333/path';\n  }\n  makeRequest(httpMethod, endpoint, params) {\n    const fullUrl = `${this.endpoint.trim()}${endpoint}`;\n    return this.http[httpMethod](fullUrl, params instanceof HttpParams ? {\n      params\n    } : params).pipe(catchError(this.handleError));\n  }\n  remove(params) {\n    return this.makeRequest('post', '/remove', params);\n  }\n  insert(params) {\n    return this.makeRequest('post', '/insert', params);\n  }\n  update(params) {\n    return this.makeRequest('put', '/update', params);\n  }\n  updateConditionals(params) {\n    return this.makeRequest('put', '/updateConditionals', params);\n  }\n  put(path, params) {\n    return this.makeRequest('put', path, new HttpParams({\n      fromObject: params\n    }));\n  }\n  getVariableData() {\n    return this.get('/getVariableData', {});\n  }\n  getPathsByConfiguration(id_configuration) {\n    return this.makeRequest('post', '/getByConfiguration', {\n      id_configuration\n    });\n  }\n  getPathByConfiguration(id_configuration) {\n    return this.makeRequest('post', '/getPathByConfiguration', {\n      id_configuration\n    });\n  }\n  getConditionalByPath(params) {\n    return this.makeRequest('post', '/getConditionalByPath', params);\n  }\n  get(path, params) {\n    return this.makeRequest('get', path, new HttpParams({\n      fromObject: params\n    }));\n  }\n  handleError(error) {\n    console.error('Ocorreu um erro:', error);\n    return throwError('Erro na solicitação. Por favor, tente novamente mais tarde.');\n  }\n}\nPathService.ɵfac = function PathService_Factory(t) {\n  return new (t || PathService)(i0.ɵɵinject(i1.HttpClient));\n};\nPathService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PathService,\n  factory: PathService.ɵfac,\n  providedIn: 'root'\n});\nexport { PathService };","map":{"version":3,"names":["HttpParams","throwError","catchError","PathService","constructor","http","endpoint","makeRequest","httpMethod","params","fullUrl","trim","pipe","handleError","remove","insert","update","updateConditionals","put","path","fromObject","getVariableData","get","getPathsByConfiguration","id_configuration","getPathByConfiguration","getConditionalByPath","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\modules\\auth\\api-authenticate\\path\\paths.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PathService {\r\n  private endpoint = 'http://localhost:3333/path';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private makeRequest<T>(httpMethod: string, endpoint: string, params?: any): Observable<T> {\r\n    const fullUrl = `${this.endpoint.trim()}${endpoint}`;\r\n\r\n    return this.http[httpMethod](\r\n      fullUrl,\r\n      params instanceof HttpParams ? { params } : params\r\n    ).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  remove(params: any): Observable<any> {\r\n    return this.makeRequest('post', '/remove', params);\r\n  }\r\n\r\n  insert(params: any): Observable<any> {\r\n    return this.makeRequest('post', '/insert', params);\r\n  }\r\n\r\n  update(params: any): Observable<any> {\r\n    return this.makeRequest('put', '/update', params);\r\n  }\r\n\r\n  updateConditionals(params: any): Observable<any> {\r\n    return this.makeRequest('put', '/updateConditionals', params);\r\n  }\r\n\r\n  put(path: string, params: { [param: string]: string | number | boolean }): Observable<any> {\r\n    return this.makeRequest('put', path, new HttpParams({ fromObject: params }));\r\n  }\r\n\r\n  getVariableData(): Observable<any> {\r\n    return this.get('/getVariableData', {});\r\n  }\r\n\r\n  getPathsByConfiguration(id_configuration: any): Observable<any> {\r\n    return this.makeRequest('post', '/getByConfiguration', { id_configuration });\r\n  }\r\n\r\n  getPathByConfiguration(id_configuration: any): Observable<any> {\r\n    return this.makeRequest('post', '/getPathByConfiguration', { id_configuration });\r\n  }\r\n\r\n\r\n  getConditionalByPath(params: any): Observable<any> {\r\n    return this.makeRequest('post', '/getConditionalByPath', params );\r\n  }\r\n\r\n  get(path: string, params: { [param: string]: string | number | boolean }): Observable<any> {\r\n    return this.makeRequest('get', path, new HttpParams({ fromObject: params }));\r\n  }\r\n\r\n\r\n\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('Ocorreu um erro:', error);\r\n    return throwError('Erro na solicitação. Por favor, tente novamente mais tarde.');\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAE3C,MAGaC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,QAAQ,GAAG,4BAA4B;EAER;EAE/BC,WAAWA,CAAIC,UAAkB,EAAEF,QAAgB,EAAEG,MAAY;IACvE,MAAMC,OAAO,GAAG,GAAG,IAAI,CAACJ,QAAQ,CAACK,IAAI,EAAE,GAAGL,QAAQ,EAAE;IAEpD,OAAO,IAAI,CAACD,IAAI,CAACG,UAAU,CAAC,CAC1BE,OAAO,EACPD,MAAM,YAAYT,UAAU,GAAG;MAAES;IAAM,CAAE,GAAGA,MAAM,CACnD,CAACG,IAAI,CACJV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEAC,MAAMA,CAACL,MAAW;IAChB,OAAO,IAAI,CAACF,WAAW,CAAC,MAAM,EAAE,SAAS,EAAEE,MAAM,CAAC;EACpD;EAEAM,MAAMA,CAACN,MAAW;IAChB,OAAO,IAAI,CAACF,WAAW,CAAC,MAAM,EAAE,SAAS,EAAEE,MAAM,CAAC;EACpD;EAEAO,MAAMA,CAACP,MAAW;IAChB,OAAO,IAAI,CAACF,WAAW,CAAC,KAAK,EAAE,SAAS,EAAEE,MAAM,CAAC;EACnD;EAEAQ,kBAAkBA,CAACR,MAAW;IAC5B,OAAO,IAAI,CAACF,WAAW,CAAC,KAAK,EAAE,qBAAqB,EAAEE,MAAM,CAAC;EAC/D;EAEAS,GAAGA,CAACC,IAAY,EAAEV,MAAsD;IACtE,OAAO,IAAI,CAACF,WAAW,CAAC,KAAK,EAAEY,IAAI,EAAE,IAAInB,UAAU,CAAC;MAAEoB,UAAU,EAAEX;IAAM,CAAE,CAAC,CAAC;EAC9E;EAEAY,eAAeA,CAAA;IACb,OAAO,IAAI,CAACC,GAAG,CAAC,kBAAkB,EAAE,EAAE,CAAC;EACzC;EAEAC,uBAAuBA,CAACC,gBAAqB;IAC3C,OAAO,IAAI,CAACjB,WAAW,CAAC,MAAM,EAAE,qBAAqB,EAAE;MAAEiB;IAAgB,CAAE,CAAC;EAC9E;EAEAC,sBAAsBA,CAACD,gBAAqB;IAC1C,OAAO,IAAI,CAACjB,WAAW,CAAC,MAAM,EAAE,yBAAyB,EAAE;MAAEiB;IAAgB,CAAE,CAAC;EAClF;EAGAE,oBAAoBA,CAACjB,MAAW;IAC9B,OAAO,IAAI,CAACF,WAAW,CAAC,MAAM,EAAE,uBAAuB,EAAEE,MAAM,CAAE;EACnE;EAEAa,GAAGA,CAACH,IAAY,EAAEV,MAAsD;IACtE,OAAO,IAAI,CAACF,WAAW,CAAC,KAAK,EAAEY,IAAI,EAAE,IAAInB,UAAU,CAAC;MAAEoB,UAAU,EAAEX;IAAM,CAAE,CAAC,CAAC;EAC9E;EAKQI,WAAWA,CAACc,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO1B,UAAU,CAAC,6DAA6D,CAAC;EAClF;;AA/DWE,WAAW,C;mBAAXA,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX7B,WAAW,C;SAAXA,WAAW;EAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPhC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}