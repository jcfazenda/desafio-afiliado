{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ConfigurationFilterService {\n  constructor(http) {\n    this.http = http;\n    this.CodeApi = 0;\n    this.endpoint = \"\";\n  }\n  /* chamadas endpoints */\n  getCountryes() {\n    const endpoint = 'http://localhost:3333/configurationFilter/getCountryes';\n    return this.get(endpoint, {}).pipe(catchError(this.handleError));\n  }\n  getBrands() {\n    const endpoint = 'http://localhost:3333/configurationFilter/getBrands';\n    return this.get(endpoint, {}).pipe(catchError(this.handleError));\n  }\n  getOperationTypes() {\n    const endpoint = 'http://localhost:3333/configurationFilter/getOperationTypes';\n    return this.get(endpoint, {}).pipe(catchError(this.handleError));\n  }\n  get(path, params) {\n    const queryParams = new HttpParams({\n      fromObject: params\n    }); // Converte parâmetros para HttpParams\n    return this.http.get(`${this.endpoint.trim()}${path}`, {\n      params: queryParams\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('Ocorreu um erro:', error);\n    return throwError('Erro na solicitação. Por favor, tente novamente mais tarde.');\n  }\n  static #_ = this.ɵfac = function ConfigurationFilterService_Factory(t) {\n    return new (t || ConfigurationFilterService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigurationFilterService,\n    factory: ConfigurationFilterService.ɵfac\n  });\n}\nexport { ConfigurationFilterService };","map":{"version":3,"names":["throwError","HttpParams","catchError","ConfigurationFilterService","constructor","http","CodeApi","endpoint","getCountryes","get","pipe","handleError","getBrands","getOperationTypes","path","params","queryParams","fromObject","trim","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\modules\\auth\\api-authenticate\\configuration\\configuration-filter.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core'; \r\nimport { throwError, Observable, of, BehaviorSubject } from 'rxjs';  \r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { map, catchError, tap } from 'rxjs/operators';   \r\n\r\n \r\n@Injectable()\r\nexport class ConfigurationFilterService {\r\n \r\n    CodeApi = 0;\r\n    Api:    any; \r\n    Hub:    any; \r\n      \r\n    Usuario: any;  \r\n    endpoint  = \"\";  \r\n\r\n    constructor(private http: HttpClient ) { \r\n        \r\n    }   \r\n \r\n      /* chamadas endpoints */\r\n      getCountryes(): Observable<any> {\r\n        const endpoint = 'http://localhost:3333/configurationFilter/getCountryes';\r\n        return this.get(endpoint, {}).pipe(catchError(this.handleError));\r\n      }\r\n\r\n      getBrands(): Observable<any> {\r\n        const endpoint = 'http://localhost:3333/configurationFilter/getBrands';\r\n        return this.get(endpoint, {}).pipe(catchError(this.handleError));\r\n      }\r\n      getOperationTypes(): Observable<any> {\r\n        const endpoint = 'http://localhost:3333/configurationFilter/getOperationTypes';\r\n        return this.get(endpoint, {}).pipe(catchError(this.handleError));\r\n      }\r\n\r\n      get(path: string, params: { [param: string]: string | number | boolean | readonly (string | number | boolean)[] }): Observable<any> {\r\n        const queryParams = new HttpParams({ fromObject: params }); // Converte parâmetros para HttpParams\r\n        return this.http.get<any>(\r\n          `${this.endpoint.trim()}${path}`,\r\n          { params: queryParams }\r\n        ).pipe(catchError(this.handleError));\r\n      }\r\n\r\n    private handleError(error: any): Observable<never> {\r\n        console.error('Ocorreu um erro:', error);\r\n        return throwError('Erro na solicitação. Por favor, tente novamente mais tarde.');\r\n    }\r\n\r\n\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,QAAyC,MAAM;AAClE,SAAkCC,UAAU,QAAQ,sBAAsB;AAC1E,SAAcC,UAAU,QAAa,gBAAgB;;;AAGrD,MACaC,0BAA0B;EASnCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPxB,KAAAC,OAAO,GAAG,CAAC;IAKX,KAAAC,QAAQ,GAAI,EAAE;EAId;EAEE;EACAC,YAAYA,CAAA;IACV,MAAMD,QAAQ,GAAG,wDAAwD;IACzE,OAAO,IAAI,CAACE,GAAG,CAACF,QAAQ,EAAE,EAAE,CAAC,CAACG,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAClE;EAEAC,SAASA,CAAA;IACP,MAAML,QAAQ,GAAG,qDAAqD;IACtE,OAAO,IAAI,CAACE,GAAG,CAACF,QAAQ,EAAE,EAAE,CAAC,CAACG,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAClE;EACAE,iBAAiBA,CAAA;IACf,MAAMN,QAAQ,GAAG,6DAA6D;IAC9E,OAAO,IAAI,CAACE,GAAG,CAACF,QAAQ,EAAE,EAAE,CAAC,CAACG,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAClE;EAEAF,GAAGA,CAACK,IAAY,EAAEC,MAA+F;IAC/G,MAAMC,WAAW,GAAG,IAAIf,UAAU,CAAC;MAAEgB,UAAU,EAAEF;IAAM,CAAE,CAAC,CAAC,CAAC;IAC5D,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAClB,GAAG,IAAI,CAACF,QAAQ,CAACW,IAAI,EAAE,GAAGJ,IAAI,EAAE,EAChC;MAAEC,MAAM,EAAEC;IAAW,CAAE,CACxB,CAACN,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACtC;EAEMA,WAAWA,CAACQ,KAAU;IAC1BC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAOnB,UAAU,CAAC,6DAA6D,CAAC;EACpF;EAAC,QAAAqB,CAAA,G;qBAvCQlB,0BAA0B,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAA1BvB,0BAA0B;IAAAwB,OAAA,EAA1BxB,0BAA0B,CAAAyB;EAAA;;SAA1BzB,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}