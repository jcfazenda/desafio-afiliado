{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass FuseUtilsService {\n  /**\n   * Constructor\n   */\n  constructor() {}\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get the equivalent \"IsActiveMatchOptions\" options for \"exact = true\".\n   */\n  get exactMatchOptions() {\n    return {\n      paths: 'exact',\n      fragment: 'ignored',\n      matrixParams: 'ignored',\n      queryParams: 'exact'\n    };\n  }\n  /**\n   * Get the equivalent \"IsActiveMatchOptions\" options for \"exact = false\".\n   */\n  get subsetMatchOptions() {\n    return {\n      paths: 'subset',\n      fragment: 'ignored',\n      matrixParams: 'ignored',\n      queryParams: 'subset'\n    };\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Generates a random id\n   *\n   * @param length\n   */\n  randomId(length = 10) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let name = '';\n    for (let i = 0; i < 10; i++) {\n      name += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return name;\n  }\n  static #_ = this.ɵfac = function FuseUtilsService_Factory(t) {\n    return new (t || FuseUtilsService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseUtilsService,\n    factory: FuseUtilsService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FuseUtilsService };","map":{"version":3,"names":["FuseUtilsService","constructor","exactMatchOptions","paths","fragment","matrixParams","queryParams","subsetMatchOptions","randomId","length","chars","name","i","charAt","Math","floor","random","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\@fuse\\services\\utils\\utils.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IsActiveMatchOptions } from '@angular/router';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuseUtilsService\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get the equivalent \"IsActiveMatchOptions\" options for \"exact = true\".\r\n     */\r\n    get exactMatchOptions(): IsActiveMatchOptions\r\n    {\r\n        return {\r\n            paths       : 'exact',\r\n            fragment    : 'ignored',\r\n            matrixParams: 'ignored',\r\n            queryParams : 'exact'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the equivalent \"IsActiveMatchOptions\" options for \"exact = false\".\r\n     */\r\n    get subsetMatchOptions(): IsActiveMatchOptions\r\n    {\r\n        return {\r\n            paths       : 'subset',\r\n            fragment    : 'ignored',\r\n            matrixParams: 'ignored',\r\n            queryParams : 'subset'\r\n        };\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Generates a random id\r\n     *\r\n     * @param length\r\n     */\r\n    randomId(length: number = 10): string\r\n    {\r\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        let name = '';\r\n\r\n        for ( let i = 0; i < 10; i++ )\r\n        {\r\n            name += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n\r\n        return name;\r\n    }\r\n}\r\n"],"mappings":";AAGA,MAGaA,gBAAgB;EAEzB;;;EAGAC,YAAA,GAEA;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIC,iBAAiBA,CAAA;IAEjB,OAAO;MACHC,KAAK,EAAS,OAAO;MACrBC,QAAQ,EAAM,SAAS;MACvBC,YAAY,EAAE,SAAS;MACvBC,WAAW,EAAG;KACjB;EACL;EAEA;;;EAGA,IAAIC,kBAAkBA,CAAA;IAElB,OAAO;MACHJ,KAAK,EAAS,QAAQ;MACtBC,QAAQ,EAAM,SAAS;MACvBC,YAAY,EAAE,SAAS;MACvBC,WAAW,EAAG;KACjB;EACL;EAEA;EACA;EACA;EAEA;;;;;EAKAE,QAAQA,CAACC,MAAA,GAAiB,EAAE;IAExB,MAAMC,KAAK,GAAG,gEAAgE;IAC9E,IAAIC,IAAI,GAAG,EAAE;IAEb,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAC5B;MACID,IAAI,IAAID,KAAK,CAACG,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,KAAK,CAACD,MAAM,CAAC,CAAC;;IAGlE,OAAOE,IAAI;EACf;EAAC,QAAAM,CAAA,G;qBA3DQjB,gBAAgB;EAAA;EAAA,QAAAkB,EAAA,G;WAAhBlB,gBAAgB;IAAAmB,OAAA,EAAhBnB,gBAAgB,CAAAoB,IAAA;IAAAC,UAAA,EAFb;EAAM;;SAETrB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}