{"ast":null,"code":"import { throwError, of } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ConnectionService {\n  constructor(http) {\n    this.http = http;\n    this.endpoint = \"\";\n  }\n  /* API */\n  Connect(model) {\n    return of(true);\n  }\n  Send(model) {\n    return this.get(model.endpoint, model).pipe(map(res => {\n      return res;\n    }), catchError(error => {\n      return error;\n    }));\n  }\n  get(path, params) {\n    const queryParams = new HttpParams({\n      fromObject: params\n    }); // Converte parâmetros para HttpParams\n    return this.http.get(`${this.endpoint.trim()}${path}`, {\n      params: queryParams\n    }).pipe(catchError(this.handleError));\n  }\n  post_api(path, body = {}) {\n    return this.http.post(`${this.endpoint.trim()}${path}`, JSON.stringify(body), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('Ocorreu um erro:', error);\n    return throwError('Erro na solicitação. Por favor, tente novamente mais tarde.');\n  }\n  static #_ = this.ɵfac = function ConnectionService_Factory(t) {\n    return new (t || ConnectionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectionService,\n    factory: ConnectionService.ɵfac\n  });\n}\nexport { ConnectionService };","map":{"version":3,"names":["throwError","of","HttpParams","map","catchError","ConnectionService","constructor","http","endpoint","Connect","model","Send","get","pipe","res","error","path","params","queryParams","fromObject","trim","handleError","post_api","body","post","JSON","stringify","headers","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\modules\\auth\\api-authenticate\\connection.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core'; \r\nimport { throwError, Observable, of, BehaviorSubject } from 'rxjs';  \r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { map, catchError, tap } from 'rxjs/operators';   \r\n \r\n\r\n@Injectable()\r\nexport class ConnectionService {\r\n \r\n    endpoint  = \"\";  \r\n\r\n    constructor(private http: HttpClient ) { \r\n        \r\n    }   \r\n\r\n    /* API */\r\n    Connect(model: any): Observable<any> { \r\n        return of(true);\r\n    }  \r\n\r\n    Send(model: any): Observable<any> { \r\n  \r\n        return this.get(model.endpoint, model).pipe(map((res: any) => { \r\n            return res;\r\n        }),\r\n        catchError(error => { \r\n            return error;\r\n            })\r\n        ); \r\n    } \r\n\r\n    get(path: string, params: { [param: string]: string | number | boolean | readonly (string | number | boolean)[] }): Observable<any> {\r\n        const queryParams = new HttpParams({ fromObject: params }); // Converte parâmetros para HttpParams\r\n        return this.http.get<any>(\r\n          `${this.endpoint.trim()}${path}`,\r\n          { params: queryParams }\r\n        ).pipe(catchError(this.handleError));\r\n      }\r\n      \r\n\r\n    post_api(path: string, body: Object = {}): Observable<any> { \r\n        \r\n        return this.http.post(\r\n            `${this.endpoint.trim()}${path}`, JSON.stringify(body),\r\n            { headers: { 'Content-Type': 'application/json' } })\r\n            .pipe(catchError(this.handleError ));\r\n\r\n    } \r\n    private handleError(error: any): Observable<never> {\r\n        console.error('Ocorreu um erro:', error);\r\n        return throwError('Erro na solicitação. Por favor, tente novamente mais tarde.');\r\n    }\r\n\r\n}\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAcC,EAAE,QAAyB,MAAM;AAClE,SAAkCC,UAAU,QAAQ,sBAAsB;AAC1E,SAASC,GAAG,EAAEC,UAAU,QAAa,gBAAgB;;;AAGrD,MACaC,iBAAiB;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,QAAQ,GAAI,EAAE;EAId;EAEA;EACAC,OAAOA,CAACC,KAAU;IACd,OAAOT,EAAE,CAAC,IAAI,CAAC;EACnB;EAEAU,IAAIA,CAACD,KAAU;IAEX,OAAO,IAAI,CAACE,GAAG,CAACF,KAAK,CAACF,QAAQ,EAAEE,KAAK,CAAC,CAACG,IAAI,CAACV,GAAG,CAAEW,GAAQ,IAAI;MACzD,OAAOA,GAAG;IACd,CAAC,CAAC,EACFV,UAAU,CAACW,KAAK,IAAG;MACf,OAAOA,KAAK;IACZ,CAAC,CAAC,CACL;EACL;EAEAH,GAAGA,CAACI,IAAY,EAAEC,MAA+F;IAC7G,MAAMC,WAAW,GAAG,IAAIhB,UAAU,CAAC;MAAEiB,UAAU,EAAEF;IAAM,CAAE,CAAC,CAAC,CAAC;IAC5D,OAAO,IAAI,CAACV,IAAI,CAACK,GAAG,CAClB,GAAG,IAAI,CAACJ,QAAQ,CAACY,IAAI,EAAE,GAAGJ,IAAI,EAAE,EAChC;MAAEC,MAAM,EAAEC;IAAW,CAAE,CACxB,CAACL,IAAI,CAACT,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACtC;EAGFC,QAAQA,CAACN,IAAY,EAAEO,IAAA,GAAe,EAAE;IAEpC,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CACjB,GAAG,IAAI,CAAChB,QAAQ,CAACY,IAAI,EAAE,GAAGJ,IAAI,EAAE,EAAES,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EACtD;MAAEI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CAAC,CACnDd,IAAI,CAACT,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAE,CAAC;EAE5C;EACQA,WAAWA,CAACN,KAAU;IAC1Ba,OAAO,CAACb,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAOf,UAAU,CAAC,6DAA6D,CAAC;EACpF;EAAC,QAAA6B,CAAA,G;qBA5CQxB,iBAAiB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjB7B,iBAAiB;IAAA8B,OAAA,EAAjB9B,iBAAiB,CAAA+B;EAAA;;SAAjB/B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}