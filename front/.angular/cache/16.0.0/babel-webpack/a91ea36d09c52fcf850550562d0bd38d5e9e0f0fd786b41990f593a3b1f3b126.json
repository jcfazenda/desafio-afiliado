{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { debounceTime, fromEvent, Subject, takeUntil } from 'rxjs';\nimport PerfectScrollbar from 'perfect-scrollbar';\nimport { merge } from 'lodash-es';\nimport { ScrollbarGeometry, ScrollbarPosition } from '@fuse/directives/scrollbar/scrollbar.types';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/platform\";\nimport * as i2 from \"@angular/router\";\n/**\n * Wrapper directive for the Perfect Scrollbar: https://github.com/mdbootstrap/perfect-scrollbar\n */\nclass FuseScrollbarDirective {\n  /**\n   * Constructor\n   */\n  constructor(_elementRef, _platform, _router) {\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._router = _router;\n    /* eslint-enable @typescript-eslint/naming-convention */\n    this.fuseScrollbar = true;\n    this._unsubscribeAll = new Subject();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Getter for _elementRef\n   */\n  get elementRef() {\n    return this._elementRef;\n  }\n  /**\n   * Getter for _ps\n   */\n  get ps() {\n    return this._ps;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Lifecycle hooks\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On changes\n   *\n   * @param changes\n   */\n  ngOnChanges(changes) {\n    // Enabled\n    if ('fuseScrollbar' in changes) {\n      // Interpret empty string as 'true'\n      this.fuseScrollbar = coerceBooleanProperty(changes.fuseScrollbar.currentValue);\n      // If enabled, init the directive\n      if (this.fuseScrollbar) {\n        this._init();\n      }\n      // Otherwise destroy it\n      else {\n        this._destroy();\n      }\n    }\n    // Scrollbar options\n    if ('fuseScrollbarOptions' in changes) {\n      // Merge the options\n      this._options = merge({}, this._options, changes.fuseScrollbarOptions.currentValue);\n      // Return if not initialized\n      if (!this._ps) {\n        return;\n      }\n      // Destroy and re-init the PerfectScrollbar to update its options\n      setTimeout(() => {\n        this._destroy();\n      });\n      setTimeout(() => {\n        this._init();\n      });\n    }\n  }\n  /**\n   * On init\n   */\n  ngOnInit() {\n    // Subscribe to window resize event\n    fromEvent(window, 'resize').pipe(takeUntil(this._unsubscribeAll), debounceTime(150)).subscribe(() => {\n      // Update the PerfectScrollbar\n      this.update();\n    });\n  }\n  /**\n   * On destroy\n   */\n  ngOnDestroy() {\n    this._destroy();\n    // Unsubscribe from all subscriptions\n    this._unsubscribeAll.next(null);\n    this._unsubscribeAll.complete();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Is enabled\n   */\n  isEnabled() {\n    return this.fuseScrollbar;\n  }\n  /**\n   * Update the scrollbar\n   */\n  update() {\n    // Return if not initialized\n    if (!this._ps) {\n      return;\n    }\n    // Update the PerfectScrollbar\n    this._ps.update();\n  }\n  /**\n   * Destroy the scrollbar\n   */\n  destroy() {\n    this.ngOnDestroy();\n  }\n  /**\n   * Returns the geometry of the scrollable element\n   *\n   * @param prefix\n   */\n  geometry(prefix = 'scroll') {\n    return new ScrollbarGeometry(this._elementRef.nativeElement[prefix + 'Left'], this._elementRef.nativeElement[prefix + 'Top'], this._elementRef.nativeElement[prefix + 'Width'], this._elementRef.nativeElement[prefix + 'Height']);\n  }\n  /**\n   * Returns the position of the scrollable element\n   *\n   * @param absolute\n   */\n  position(absolute = false) {\n    let scrollbarPosition;\n    if (!absolute && this._ps) {\n      scrollbarPosition = new ScrollbarPosition(this._ps.reach.x || 0, this._ps.reach.y || 0);\n    } else {\n      scrollbarPosition = new ScrollbarPosition(this._elementRef.nativeElement.scrollLeft, this._elementRef.nativeElement.scrollTop);\n    }\n    return scrollbarPosition;\n  }\n  /**\n   * Scroll to\n   *\n   * @param x\n   * @param y\n   * @param speed\n   */\n  scrollTo(x, y, speed) {\n    if (y == null && speed == null) {\n      this.animateScrolling('scrollTop', x, speed);\n    } else {\n      if (x != null) {\n        this.animateScrolling('scrollLeft', x, speed);\n      }\n      if (y != null) {\n        this.animateScrolling('scrollTop', y, speed);\n      }\n    }\n  }\n  /**\n   * Scroll to X\n   *\n   * @param x\n   * @param speed\n   */\n  scrollToX(x, speed) {\n    this.animateScrolling('scrollLeft', x, speed);\n  }\n  /**\n   * Scroll to Y\n   *\n   * @param y\n   * @param speed\n   */\n  scrollToY(y, speed) {\n    this.animateScrolling('scrollTop', y, speed);\n  }\n  /**\n   * Scroll to top\n   *\n   * @param offset\n   * @param speed\n   */\n  scrollToTop(offset = 0, speed) {\n    this.animateScrolling('scrollTop', offset, speed);\n  }\n  /**\n   * Scroll to bottom\n   *\n   * @param offset\n   * @param speed\n   */\n  scrollToBottom(offset = 0, speed) {\n    const top = this._elementRef.nativeElement.scrollHeight - this._elementRef.nativeElement.clientHeight;\n    this.animateScrolling('scrollTop', top - offset, speed);\n  }\n  /**\n   * Scroll to left\n   *\n   * @param offset\n   * @param speed\n   */\n  scrollToLeft(offset = 0, speed) {\n    this.animateScrolling('scrollLeft', offset, speed);\n  }\n  /**\n   * Scroll to right\n   *\n   * @param offset\n   * @param speed\n   */\n  scrollToRight(offset = 0, speed) {\n    const left = this._elementRef.nativeElement.scrollWidth - this._elementRef.nativeElement.clientWidth;\n    this.animateScrolling('scrollLeft', left - offset, speed);\n  }\n  /**\n   * Scroll to element\n   *\n   * @param qs\n   * @param offset\n   * @param ignoreVisible If true, scrollToElement won't happen if element is already inside the current viewport\n   * @param speed\n   */\n  scrollToElement(qs, offset = 0, ignoreVisible = false, speed) {\n    const element = this._elementRef.nativeElement.querySelector(qs);\n    if (!element) {\n      return;\n    }\n    const elementPos = element.getBoundingClientRect();\n    const scrollerPos = this._elementRef.nativeElement.getBoundingClientRect();\n    if (this._elementRef.nativeElement.classList.contains('ps--active-x')) {\n      if (ignoreVisible && elementPos.right <= scrollerPos.right - Math.abs(offset)) {\n        return;\n      }\n      const currentPos = this._elementRef.nativeElement['scrollLeft'];\n      const position = elementPos.left - scrollerPos.left + currentPos;\n      this.animateScrolling('scrollLeft', position + offset, speed);\n    }\n    if (this._elementRef.nativeElement.classList.contains('ps--active-y')) {\n      if (ignoreVisible && elementPos.bottom <= scrollerPos.bottom - Math.abs(offset)) {\n        return;\n      }\n      const currentPos = this._elementRef.nativeElement['scrollTop'];\n      const position = elementPos.top - scrollerPos.top + currentPos;\n      this.animateScrolling('scrollTop', position + offset, speed);\n    }\n  }\n  /**\n   * Animate scrolling\n   *\n   * @param target\n   * @param value\n   * @param speed\n   */\n  animateScrolling(target, value, speed) {\n    if (this._animation) {\n      window.cancelAnimationFrame(this._animation);\n      this._animation = null;\n    }\n    if (!speed || typeof window === 'undefined') {\n      this._elementRef.nativeElement[target] = value;\n    } else if (value !== this._elementRef.nativeElement[target]) {\n      let newValue = 0;\n      let scrollCount = 0;\n      let oldTimestamp = performance.now();\n      let oldValue = this._elementRef.nativeElement[target];\n      const cosParameter = (oldValue - value) / 2;\n      const step = newTimestamp => {\n        scrollCount += Math.PI / (speed / (newTimestamp - oldTimestamp));\n        newValue = Math.round(value + cosParameter + cosParameter * Math.cos(scrollCount));\n        // Only continue animation if scroll position has not changed\n        if (this._elementRef.nativeElement[target] === oldValue) {\n          if (scrollCount >= Math.PI) {\n            this.animateScrolling(target, value, 0);\n          } else {\n            this._elementRef.nativeElement[target] = newValue;\n            // On a zoomed out page the resulting offset may differ\n            oldValue = this._elementRef.nativeElement[target];\n            oldTimestamp = newTimestamp;\n            this._animation = window.requestAnimationFrame(step);\n          }\n        }\n      };\n      window.requestAnimationFrame(step);\n    }\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Initialize\n   *\n   * @private\n   */\n  _init() {\n    // Return if already initialized\n    if (this._ps) {\n      return;\n    }\n    // Return if on mobile or not on browser\n    if (this._platform.ANDROID || this._platform.IOS || !this._platform.isBrowser) {\n      this.fuseScrollbar = false;\n      return;\n    }\n    // Initialize the PerfectScrollbar\n    this._ps = new PerfectScrollbar(this._elementRef.nativeElement, {\n      ...this._options\n    });\n  }\n  /**\n   * Destroy\n   *\n   * @private\n   */\n  _destroy() {\n    // Return if not initialized\n    if (!this._ps) {\n      return;\n    }\n    // Destroy the PerfectScrollbar\n    this._ps.destroy();\n    // Clean up\n    this._ps = null;\n  }\n}\nFuseScrollbarDirective.Éµfac = function FuseScrollbarDirective_Factory(t) {\n  return new (t || FuseScrollbarDirective)(i0.ÉµÉµdirectiveInject(i0.ElementRef), i0.ÉµÉµdirectiveInject(i1.Platform), i0.ÉµÉµdirectiveInject(i2.Router));\n};\nFuseScrollbarDirective.Éµdir = /*@__PURE__*/i0.ÉµÉµdefineDirective({\n  type: FuseScrollbarDirective,\n  selectors: [[\"\", \"fuseScrollbar\", \"\"]],\n  inputs: {\n    fuseScrollbar: \"fuseScrollbar\",\n    fuseScrollbarOptions: \"fuseScrollbarOptions\"\n  },\n  exportAs: [\"fuseScrollbar\"],\n  features: [i0.ÉµÉµNgOnChangesFeature]\n});\nexport { FuseScrollbarDirective };","map":{"version":3,"names":["coerceBooleanProperty","debounceTime","fromEvent","Subject","takeUntil","PerfectScrollbar","merge","ScrollbarGeometry","ScrollbarPosition","FuseScrollbarDirective","constructor","_elementRef","_platform","_router","fuseScrollbar","_unsubscribeAll","elementRef","ps","_ps","ngOnChanges","changes","currentValue","_init","_destroy","_options","fuseScrollbarOptions","setTimeout","ngOnInit","window","pipe","subscribe","update","ngOnDestroy","next","complete","isEnabled","destroy","geometry","prefix","nativeElement","position","absolute","scrollbarPosition","reach","x","y","scrollLeft","scrollTop","scrollTo","speed","animateScrolling","scrollToX","scrollToY","scrollToTop","offset","scrollToBottom","top","scrollHeight","clientHeight","scrollToLeft","scrollToRight","left","scrollWidth","clientWidth","scrollToElement","qs","ignoreVisible","element","querySelector","elementPos","getBoundingClientRect","scrollerPos","classList","contains","right","Math","abs","currentPos","bottom","target","value","_animation","cancelAnimationFrame","newValue","scrollCount","oldTimestamp","performance","now","oldValue","cosParameter","step","newTimestamp","PI","round","cos","requestAnimationFrame","ANDROID","IOS","isBrowser","i0","ÉµÉµdirectiveInject","ElementRef","i1","Platform","i2","Router","selectors","inputs","exportAs","features","ÉµÉµNgOnChangesFeature"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Ãrea de Trabalho\\projects\\payments\\iso\\src\\@fuse\\directives\\scrollbar\\scrollbar.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { debounceTime, fromEvent, Subject, takeUntil } from 'rxjs';\r\nimport PerfectScrollbar from 'perfect-scrollbar';\r\nimport { merge } from 'lodash-es';\r\nimport { ScrollbarGeometry, ScrollbarPosition } from '@fuse/directives/scrollbar/scrollbar.types';\r\n\r\n/**\r\n * Wrapper directive for the Perfect Scrollbar: https://github.com/mdbootstrap/perfect-scrollbar\r\n */\r\n@Directive({\r\n    selector: '[fuseScrollbar]',\r\n    exportAs: 'fuseScrollbar'\r\n})\r\nexport class FuseScrollbarDirective implements OnChanges, OnInit, OnDestroy\r\n{\r\n    /* eslint-disable @typescript-eslint/naming-convention */\r\n    static ngAcceptInputType_fuseScrollbar: BooleanInput;\r\n    /* eslint-enable @typescript-eslint/naming-convention */\r\n\r\n    @Input() fuseScrollbar: boolean = true;\r\n    @Input() fuseScrollbarOptions: PerfectScrollbar.Options;\r\n\r\n    private _animation: number;\r\n    private _options: PerfectScrollbar.Options;\r\n    private _ps: PerfectScrollbar;\r\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _elementRef: ElementRef,\r\n        private _platform: Platform,\r\n        private _router: Router\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Getter for _elementRef\r\n     */\r\n    get elementRef(): ElementRef\r\n    {\r\n        return this._elementRef;\r\n    }\r\n\r\n    /**\r\n     * Getter for _ps\r\n     */\r\n    get ps(): PerfectScrollbar | null\r\n    {\r\n        return this._ps;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On changes\r\n     *\r\n     * @param changes\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void\r\n    {\r\n        // Enabled\r\n        if ( 'fuseScrollbar' in changes )\r\n        {\r\n            // Interpret empty string as 'true'\r\n            this.fuseScrollbar = coerceBooleanProperty(changes.fuseScrollbar.currentValue);\r\n\r\n            // If enabled, init the directive\r\n            if ( this.fuseScrollbar )\r\n            {\r\n                this._init();\r\n            }\r\n            // Otherwise destroy it\r\n            else\r\n            {\r\n                this._destroy();\r\n            }\r\n        }\r\n\r\n        // Scrollbar options\r\n        if ( 'fuseScrollbarOptions' in changes )\r\n        {\r\n            // Merge the options\r\n            this._options = merge({}, this._options, changes.fuseScrollbarOptions.currentValue);\r\n\r\n            // Return if not initialized\r\n            if ( !this._ps )\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Destroy and re-init the PerfectScrollbar to update its options\r\n            setTimeout(() => {\r\n                this._destroy();\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this._init();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        // Subscribe to window resize event\r\n        fromEvent(window, 'resize')\r\n            .pipe(\r\n                takeUntil(this._unsubscribeAll),\r\n                debounceTime(150)\r\n            )\r\n            .subscribe(() => {\r\n\r\n                // Update the PerfectScrollbar\r\n                this.update();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        this._destroy();\r\n\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next(null);\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Is enabled\r\n     */\r\n    isEnabled(): boolean\r\n    {\r\n        return this.fuseScrollbar;\r\n    }\r\n\r\n    /**\r\n     * Update the scrollbar\r\n     */\r\n    update(): void\r\n    {\r\n        // Return if not initialized\r\n        if ( !this._ps )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Update the PerfectScrollbar\r\n        this._ps.update();\r\n    }\r\n\r\n    /**\r\n     * Destroy the scrollbar\r\n     */\r\n    destroy(): void\r\n    {\r\n        this.ngOnDestroy();\r\n    }\r\n\r\n    /**\r\n     * Returns the geometry of the scrollable element\r\n     *\r\n     * @param prefix\r\n     */\r\n    geometry(prefix: string = 'scroll'): ScrollbarGeometry\r\n    {\r\n        return new ScrollbarGeometry(\r\n            this._elementRef.nativeElement[prefix + 'Left'],\r\n            this._elementRef.nativeElement[prefix + 'Top'],\r\n            this._elementRef.nativeElement[prefix + 'Width'],\r\n            this._elementRef.nativeElement[prefix + 'Height']);\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the scrollable element\r\n     *\r\n     * @param absolute\r\n     */\r\n    position(absolute: boolean = false): ScrollbarPosition\r\n    {\r\n        let scrollbarPosition;\r\n\r\n        if ( !absolute && this._ps )\r\n        {\r\n            scrollbarPosition = new ScrollbarPosition(\r\n                this._ps.reach.x || 0,\r\n                this._ps.reach.y || 0\r\n            );\r\n        }\r\n        else\r\n        {\r\n            scrollbarPosition = new ScrollbarPosition(\r\n                this._elementRef.nativeElement.scrollLeft,\r\n                this._elementRef.nativeElement.scrollTop\r\n            );\r\n        }\r\n\r\n        return scrollbarPosition;\r\n    }\r\n\r\n    /**\r\n     * Scroll to\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @param speed\r\n     */\r\n    scrollTo(x: number, y?: number, speed?: number): void\r\n    {\r\n        if ( y == null && speed == null )\r\n        {\r\n            this.animateScrolling('scrollTop', x, speed);\r\n        }\r\n        else\r\n        {\r\n            if ( x != null )\r\n            {\r\n                this.animateScrolling('scrollLeft', x, speed);\r\n            }\r\n\r\n            if ( y != null )\r\n            {\r\n                this.animateScrolling('scrollTop', y, speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scroll to X\r\n     *\r\n     * @param x\r\n     * @param speed\r\n     */\r\n    scrollToX(x: number, speed?: number): void\r\n    {\r\n        this.animateScrolling('scrollLeft', x, speed);\r\n    }\r\n\r\n    /**\r\n     * Scroll to Y\r\n     *\r\n     * @param y\r\n     * @param speed\r\n     */\r\n    scrollToY(y: number, speed?: number): void\r\n    {\r\n        this.animateScrolling('scrollTop', y, speed);\r\n    }\r\n\r\n    /**\r\n     * Scroll to top\r\n     *\r\n     * @param offset\r\n     * @param speed\r\n     */\r\n    scrollToTop(offset: number = 0, speed?: number): void\r\n    {\r\n        this.animateScrolling('scrollTop', offset, speed);\r\n    }\r\n\r\n    /**\r\n     * Scroll to bottom\r\n     *\r\n     * @param offset\r\n     * @param speed\r\n     */\r\n    scrollToBottom(offset: number = 0, speed?: number): void\r\n    {\r\n        const top = this._elementRef.nativeElement.scrollHeight - this._elementRef.nativeElement.clientHeight;\r\n        this.animateScrolling('scrollTop', top - offset, speed);\r\n    }\r\n\r\n    /**\r\n     * Scroll to left\r\n     *\r\n     * @param offset\r\n     * @param speed\r\n     */\r\n    scrollToLeft(offset: number = 0, speed?: number): void\r\n    {\r\n        this.animateScrolling('scrollLeft', offset, speed);\r\n    }\r\n\r\n    /**\r\n     * Scroll to right\r\n     *\r\n     * @param offset\r\n     * @param speed\r\n     */\r\n    scrollToRight(offset: number = 0, speed?: number): void\r\n    {\r\n        const left = this._elementRef.nativeElement.scrollWidth - this._elementRef.nativeElement.clientWidth;\r\n        this.animateScrolling('scrollLeft', left - offset, speed);\r\n    }\r\n\r\n    /**\r\n     * Scroll to element\r\n     *\r\n     * @param qs\r\n     * @param offset\r\n     * @param ignoreVisible If true, scrollToElement won't happen if element is already inside the current viewport\r\n     * @param speed\r\n     */\r\n    scrollToElement(qs: string, offset: number = 0, ignoreVisible: boolean = false, speed?: number): void\r\n    {\r\n        const element = this._elementRef.nativeElement.querySelector(qs);\r\n\r\n        if ( !element )\r\n        {\r\n            return;\r\n        }\r\n\r\n        const elementPos = element.getBoundingClientRect();\r\n        const scrollerPos = this._elementRef.nativeElement.getBoundingClientRect();\r\n\r\n        if ( this._elementRef.nativeElement.classList.contains('ps--active-x') )\r\n        {\r\n            if ( ignoreVisible && elementPos.right <= (scrollerPos.right - Math.abs(offset)) )\r\n            {\r\n                return;\r\n            }\r\n\r\n            const currentPos = this._elementRef.nativeElement['scrollLeft'];\r\n            const position = elementPos.left - scrollerPos.left + currentPos;\r\n\r\n            this.animateScrolling('scrollLeft', position + offset, speed);\r\n        }\r\n\r\n        if ( this._elementRef.nativeElement.classList.contains('ps--active-y') )\r\n        {\r\n            if ( ignoreVisible && elementPos.bottom <= (scrollerPos.bottom - Math.abs(offset)) )\r\n            {\r\n                return;\r\n            }\r\n\r\n            const currentPos = this._elementRef.nativeElement['scrollTop'];\r\n            const position = elementPos.top - scrollerPos.top + currentPos;\r\n\r\n            this.animateScrolling('scrollTop', position + offset, speed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animate scrolling\r\n     *\r\n     * @param target\r\n     * @param value\r\n     * @param speed\r\n     */\r\n    animateScrolling(target: string, value: number, speed?: number): void\r\n    {\r\n        if ( this._animation )\r\n        {\r\n            window.cancelAnimationFrame(this._animation);\r\n            this._animation = null;\r\n        }\r\n\r\n        if ( !speed || typeof window === 'undefined' )\r\n        {\r\n            this._elementRef.nativeElement[target] = value;\r\n        }\r\n        else if ( value !== this._elementRef.nativeElement[target] )\r\n        {\r\n            let newValue = 0;\r\n            let scrollCount = 0;\r\n\r\n            let oldTimestamp = performance.now();\r\n            let oldValue = this._elementRef.nativeElement[target];\r\n\r\n            const cosParameter = (oldValue - value) / 2;\r\n\r\n            const step = (newTimestamp: number): void => {\r\n                scrollCount += Math.PI / (speed / (newTimestamp - oldTimestamp));\r\n                newValue = Math.round(value + cosParameter + cosParameter * Math.cos(scrollCount));\r\n\r\n                // Only continue animation if scroll position has not changed\r\n                if ( this._elementRef.nativeElement[target] === oldValue )\r\n                {\r\n                    if ( scrollCount >= Math.PI )\r\n                    {\r\n                        this.animateScrolling(target, value, 0);\r\n                    }\r\n                    else\r\n                    {\r\n                        this._elementRef.nativeElement[target] = newValue;\r\n\r\n                        // On a zoomed out page the resulting offset may differ\r\n                        oldValue = this._elementRef.nativeElement[target];\r\n                        oldTimestamp = newTimestamp;\r\n\r\n                        this._animation = window.requestAnimationFrame(step);\r\n                    }\r\n                }\r\n            };\r\n\r\n            window.requestAnimationFrame(step);\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Initialize\r\n     *\r\n     * @private\r\n     */\r\n    private _init(): void\r\n    {\r\n        // Return if already initialized\r\n        if ( this._ps )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Return if on mobile or not on browser\r\n        if ( this._platform.ANDROID || this._platform.IOS || !this._platform.isBrowser )\r\n        {\r\n            this.fuseScrollbar = false;\r\n            return;\r\n        }\r\n\r\n        // Initialize the PerfectScrollbar\r\n        this._ps = new PerfectScrollbar(this._elementRef.nativeElement, {...this._options});\r\n    }\r\n\r\n    /**\r\n     * Destroy\r\n     *\r\n     * @private\r\n     */\r\n    private _destroy(): void\r\n    {\r\n        // Return if not initialized\r\n        if ( !this._ps )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Destroy the PerfectScrollbar\r\n        this._ps.destroy();\r\n\r\n        // Clean up\r\n        this._ps = null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}