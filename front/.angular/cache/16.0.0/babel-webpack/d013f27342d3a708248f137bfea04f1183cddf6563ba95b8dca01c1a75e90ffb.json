{"ast":null,"code":"import { compact, fromPairs } from 'lodash-es';\nimport { FuseMockApiHandler } from '@fuse/lib/mock-api/mock-api.request-handler';\nimport * as i0 from \"@angular/core\";\nclass FuseMockApiService {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this._handlers = {\n      'get': new Map(),\n      'post': new Map(),\n      'patch': new Map(),\n      'delete': new Map(),\n      'put': new Map(),\n      'head': new Map(),\n      'jsonp': new Map(),\n      'options': new Map()\n    };\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Find the handler from the service\n   * with the given method and url\n   *\n   * @param method\n   * @param url\n   */\n  findHandler(method, url) {\n    // Prepare the return object\n    const matchingHandler = {\n      handler: undefined,\n      urlParams: {}\n    };\n    // Split the url\n    const urlParts = url.split('/');\n    // Get all related request handlers\n    const handlers = this._handlers[method.toLowerCase()];\n    // Iterate through the handlers\n    handlers.forEach((handler, handlerUrl) => {\n      // Skip if there is already a matching handler\n      if (matchingHandler.handler) {\n        return;\n      }\n      // Split the handler url\n      const handlerUrlParts = handlerUrl.split('/');\n      // Skip if the lengths of the urls we are comparing are not the same\n      if (urlParts.length !== handlerUrlParts.length) {\n        return;\n      }\n      // Compare\n      const matches = handlerUrlParts.every((handlerUrlPart, index) => handlerUrlPart === urlParts[index] || handlerUrlPart.startsWith(':'));\n      // If there is a match...\n      if (matches) {\n        // Assign the matching handler\n        matchingHandler.handler = handler;\n        // Extract and assign the parameters\n        matchingHandler.urlParams = fromPairs(compact(handlerUrlParts.map((handlerUrlPart, index) => handlerUrlPart.startsWith(':') ? [handlerUrlPart.substring(1), urlParts[index]] : undefined)));\n      }\n    });\n    return matchingHandler;\n  }\n  /**\n   * Register GET request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onGet(url, delay) {\n    return this._registerHandler('get', url, delay);\n  }\n  /**\n   * Register POST request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onPost(url, delay) {\n    return this._registerHandler('post', url, delay);\n  }\n  /**\n   * Register PATCH request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onPatch(url, delay) {\n    return this._registerHandler('patch', url, delay);\n  }\n  /**\n   * Register DELETE request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onDelete(url, delay) {\n    return this._registerHandler('delete', url, delay);\n  }\n  /**\n   * Register PUT request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onPut(url, delay) {\n    return this._registerHandler('put', url, delay);\n  }\n  /**\n   * Register HEAD request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onHead(url, delay) {\n    return this._registerHandler('head', url, delay);\n  }\n  /**\n   * Register JSONP request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onJsonp(url, delay) {\n    return this._registerHandler('jsonp', url, delay);\n  }\n  /**\n   * Register OPTIONS request handler\n   *\n   * @param url - URL address of the mocked API endpoint\n   * @param delay - Delay of the response in milliseconds\n   */\n  onOptions(url, delay) {\n    return this._registerHandler('options', url, delay);\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register and return a new instance of the handler\n   *\n   * @param method\n   * @param url\n   * @param delay\n   * @private\n   */\n  _registerHandler(method, url, delay) {\n    // Create a new instance of FuseMockApiRequestHandler\n    const fuseMockHttp = new FuseMockApiHandler(url, delay);\n    // Store the handler to access it from the interceptor\n    this._handlers[method].set(url, fuseMockHttp);\n    // Return the instance\n    return fuseMockHttp;\n  }\n  static #_ = this.ɵfac = function FuseMockApiService_Factory(t) {\n    return new (t || FuseMockApiService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMockApiService,\n    factory: FuseMockApiService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FuseMockApiService };","map":{"version":3,"names":["compact","fromPairs","FuseMockApiHandler","FuseMockApiService","constructor","_handlers","Map","findHandler","method","url","matchingHandler","handler","undefined","urlParams","urlParts","split","handlers","toLowerCase","forEach","handlerUrl","handlerUrlParts","length","matches","every","handlerUrlPart","index","startsWith","map","substring","onGet","delay","_registerHandler","onPost","onPatch","onDelete","onPut","onHead","onJsonp","onOptions","fuseMockHttp","set","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\@fuse\\lib\\mock-api\\mock-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { compact, fromPairs } from 'lodash-es';\r\nimport { FuseMockApiHandler } from '@fuse/lib/mock-api/mock-api.request-handler';\r\nimport { FuseMockApiMethods } from '@fuse/lib/mock-api/mock-api.types';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuseMockApiService\r\n{\r\n    private _handlers: { [key: string]: Map<string, FuseMockApiHandler> } = {\r\n        'get'    : new Map<string, FuseMockApiHandler>(),\r\n        'post'   : new Map<string, FuseMockApiHandler>(),\r\n        'patch'  : new Map<string, FuseMockApiHandler>(),\r\n        'delete' : new Map<string, FuseMockApiHandler>(),\r\n        'put'    : new Map<string, FuseMockApiHandler>(),\r\n        'head'   : new Map<string, FuseMockApiHandler>(),\r\n        'jsonp'  : new Map<string, FuseMockApiHandler>(),\r\n        'options': new Map<string, FuseMockApiHandler>()\r\n    };\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Find the handler from the service\r\n     * with the given method and url\r\n     *\r\n     * @param method\r\n     * @param url\r\n     */\r\n    findHandler(method: string, url: string): { handler: FuseMockApiHandler | undefined; urlParams: { [key: string]: string } }\r\n    {\r\n        // Prepare the return object\r\n        const matchingHandler: { handler: FuseMockApiHandler | undefined; urlParams: { [key: string]: string } } = {\r\n            handler  : undefined,\r\n            urlParams: {}\r\n        };\r\n\r\n        // Split the url\r\n        const urlParts = url.split('/');\r\n\r\n        // Get all related request handlers\r\n        const handlers = this._handlers[method.toLowerCase()];\r\n\r\n        // Iterate through the handlers\r\n        handlers.forEach((handler, handlerUrl) => {\r\n\r\n            // Skip if there is already a matching handler\r\n            if ( matchingHandler.handler )\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Split the handler url\r\n            const handlerUrlParts = handlerUrl.split('/');\r\n\r\n            // Skip if the lengths of the urls we are comparing are not the same\r\n            if ( urlParts.length !== handlerUrlParts.length )\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Compare\r\n            const matches = handlerUrlParts.every((handlerUrlPart, index) => handlerUrlPart === urlParts[index] || handlerUrlPart.startsWith(':'));\r\n\r\n            // If there is a match...\r\n            if ( matches )\r\n            {\r\n                // Assign the matching handler\r\n                matchingHandler.handler = handler;\r\n\r\n                // Extract and assign the parameters\r\n                matchingHandler.urlParams = fromPairs(compact(handlerUrlParts.map((handlerUrlPart, index) =>\r\n                    handlerUrlPart.startsWith(':') ? [handlerUrlPart.substring(1), urlParts[index]] : undefined\r\n                )));\r\n            }\r\n        });\r\n\r\n        return matchingHandler;\r\n    }\r\n\r\n    /**\r\n     * Register GET request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onGet(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('get', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register POST request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onPost(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('post', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register PATCH request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onPatch(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('patch', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register DELETE request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onDelete(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('delete', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register PUT request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onPut(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('put', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register HEAD request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onHead(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('head', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register JSONP request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onJsonp(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('jsonp', url, delay);\r\n    }\r\n\r\n    /**\r\n     * Register OPTIONS request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\r\n    onOptions(url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        return this._registerHandler('options', url, delay);\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register and return a new instance of the handler\r\n     *\r\n     * @param method\r\n     * @param url\r\n     * @param delay\r\n     * @private\r\n     */\r\n    private _registerHandler(method: FuseMockApiMethods, url: string, delay?: number): FuseMockApiHandler\r\n    {\r\n        // Create a new instance of FuseMockApiRequestHandler\r\n        const fuseMockHttp = new FuseMockApiHandler(url, delay);\r\n\r\n        // Store the handler to access it from the interceptor\r\n        this._handlers[method].set(url, fuseMockHttp);\r\n\r\n        // Return the instance\r\n        return fuseMockHttp;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}