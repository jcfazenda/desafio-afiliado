{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { shortcuts as shortcutsData } from 'app/mock-api/common/shortcuts/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nclass ShortcutsMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._shortcuts = shortcutsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/shortcuts').reply(() => [200, cloneDeep(this._shortcuts)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/common/shortcuts').reply(({\n      request\n    }) => {\n      // Get the shortcut\n      const newShortcut = cloneDeep(request.body.shortcut);\n      // Generate a new GUID\n      newShortcut.id = FuseMockApiUtils.guid();\n      // Unshift the new shortcut\n      this._shortcuts.unshift(newShortcut);\n      // Return the response\n      return [200, newShortcut];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/common/shortcuts').reply(({\n      request\n    }) => {\n      // Get the id and shortcut\n      const id = request.body.id;\n      const shortcut = cloneDeep(request.body.shortcut);\n      // Prepare the updated shortcut\n      let updatedShortcut = null;\n      // Find the shortcut and update it\n      this._shortcuts.forEach((item, index, shortcuts) => {\n        if (item.id === id) {\n          // Update the shortcut\n          shortcuts[index] = assign({}, shortcuts[index], shortcut);\n          // Store the updated shortcut\n          updatedShortcut = shortcuts[index];\n        }\n      });\n      // Return the response\n      return [200, updatedShortcut];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Shortcuts - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/common/shortcuts').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Prepare the deleted shortcut\n      let deletedShortcut = null;\n      // Find the shortcut\n      const index = this._shortcuts.findIndex(item => item.id === id);\n      // Store the deleted shortcut\n      deletedShortcut = cloneDeep(this._shortcuts[index]);\n      // Delete the shortcut\n      this._shortcuts.splice(index, 1);\n      // Return the response\n      return [200, deletedShortcut];\n    });\n  }\n  static #_ = this.ɵfac = function ShortcutsMockApi_Factory(t) {\n    return new (t || ShortcutsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShortcutsMockApi,\n    factory: ShortcutsMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ShortcutsMockApi };","map":{"version":3,"names":["assign","cloneDeep","FuseMockApiUtils","shortcuts","shortcutsData","ShortcutsMockApi","constructor","_fuseMockApiService","_shortcuts","registerHandlers","onGet","reply","onPost","request","newShortcut","body","shortcut","id","guid","unshift","onPatch","updatedShortcut","forEach","item","index","onDelete","params","get","deletedShortcut","findIndex","splice","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\mock-api\\common\\shortcuts\\api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { assign, cloneDeep } from 'lodash-es';\r\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\r\nimport { shortcuts as shortcutsData } from 'app/mock-api/common/shortcuts/data';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ShortcutsMockApi\r\n{\r\n    private _shortcuts: any = shortcutsData;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _fuseMockApiService: FuseMockApiService)\r\n    {\r\n        // Register Mock API handlers\r\n        this.registerHandlers();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register Mock API handlers\r\n     */\r\n    registerHandlers(): void\r\n    {\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Shortcuts - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/common/shortcuts')\r\n            .reply(() => [200, cloneDeep(this._shortcuts)]);\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Shortcuts - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/common/shortcuts')\r\n            .reply(({request}) => {\r\n\r\n                // Get the shortcut\r\n                const newShortcut = cloneDeep(request.body.shortcut);\r\n\r\n                // Generate a new GUID\r\n                newShortcut.id = FuseMockApiUtils.guid();\r\n\r\n                // Unshift the new shortcut\r\n                this._shortcuts.unshift(newShortcut);\r\n\r\n                // Return the response\r\n                return [200, newShortcut];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Shortcuts - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/common/shortcuts')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and shortcut\r\n                const id = request.body.id;\r\n                const shortcut = cloneDeep(request.body.shortcut);\r\n\r\n                // Prepare the updated shortcut\r\n                let updatedShortcut = null;\r\n\r\n                // Find the shortcut and update it\r\n                this._shortcuts.forEach((item: any, index: number, shortcuts: any[]) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        // Update the shortcut\r\n                        shortcuts[index] = assign({}, shortcuts[index], shortcut);\r\n\r\n                        // Store the updated shortcut\r\n                        updatedShortcut = shortcuts[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedShortcut];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Shortcuts - DELETE\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onDelete('api/common/shortcuts')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id\r\n                const id = request.params.get('id');\r\n\r\n                // Prepare the deleted shortcut\r\n                let deletedShortcut = null;\r\n\r\n                // Find the shortcut\r\n                const index = this._shortcuts.findIndex((item: any) => item.id === id);\r\n\r\n                // Store the deleted shortcut\r\n                deletedShortcut = cloneDeep(this._shortcuts[index]);\r\n\r\n                // Delete the shortcut\r\n                this._shortcuts.splice(index, 1);\r\n\r\n                // Return the response\r\n                return [200, deletedShortcut];\r\n            });\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}