{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/button\";\nimport * as i2 from \"@angular/material/icon\";\nimport * as i3 from \"@angular/material/tooltip\";\nimport * as i4 from \"@angular/common\";\nfunction FuseFullscreenComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:arrows-expand\");\n  }\n}\nclass FuseFullscreenComponent {\n  /**\n   * Constructor\n   */\n  constructor(_document) {\n    this._document = _document;\n    this._isFullscreen = false;\n    this._fsDoc = _document;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Lifecycle hooks\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * On init\n   */\n  ngOnInit() {\n    this._fsDocEl = document.documentElement;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Toggle the fullscreen mode\n   */\n  toggleFullscreen() {\n    // Check if the fullscreen is open\n    this._isFullscreen = this._getBrowserFullscreenElement() !== null;\n    // Toggle the fullscreen\n    if (this._isFullscreen) {\n      this._closeFullscreen();\n    } else {\n      this._openFullscreen();\n    }\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Private methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Get browser's fullscreen element\n   *\n   * @private\n   */\n  _getBrowserFullscreenElement() {\n    if (typeof this._fsDoc.fullscreenElement !== 'undefined') {\n      return this._fsDoc.fullscreenElement;\n    }\n    if (typeof this._fsDoc.mozFullScreenElement !== 'undefined') {\n      return this._fsDoc.mozFullScreenElement;\n    }\n    if (typeof this._fsDoc.msFullscreenElement !== 'undefined') {\n      return this._fsDoc.msFullscreenElement;\n    }\n    if (typeof this._fsDoc.webkitFullscreenElement !== 'undefined') {\n      return this._fsDoc.webkitFullscreenElement;\n    }\n    throw new Error('Fullscreen mode is not supported by this browser');\n  }\n  /**\n   * Open the fullscreen\n   *\n   * @private\n   */\n  _openFullscreen() {\n    if (this._fsDocEl.requestFullscreen) {\n      this._fsDocEl.requestFullscreen();\n      return;\n    }\n    // Firefox\n    if (this._fsDocEl.mozRequestFullScreen) {\n      this._fsDocEl.mozRequestFullScreen();\n      return;\n    }\n    // Chrome, Safari and Opera\n    if (this._fsDocEl.webkitRequestFullscreen) {\n      this._fsDocEl.webkitRequestFullscreen();\n      return;\n    }\n    // IE/Edge\n    if (this._fsDocEl.msRequestFullscreen) {\n      this._fsDocEl.msRequestFullscreen();\n      return;\n    }\n  }\n  /**\n   * Close the fullscreen\n   *\n   * @private\n   */\n  _closeFullscreen() {\n    if (this._fsDoc.exitFullscreen) {\n      this._fsDoc.exitFullscreen();\n      return;\n    }\n    // Firefox\n    if (this._fsDoc.mozCancelFullScreen) {\n      this._fsDoc.mozCancelFullScreen();\n      return;\n    }\n    // Chrome, Safari and Opera\n    if (this._fsDoc.webkitExitFullscreen) {\n      this._fsDoc.webkitExitFullscreen();\n      return;\n    }\n    // IE/Edge\n    else if (this._fsDoc.msExitFullscreen) {\n      this._fsDoc.msExitFullscreen();\n      return;\n    }\n  }\n}\nFuseFullscreenComponent.ɵfac = function FuseFullscreenComponent_Factory(t) {\n  return new (t || FuseFullscreenComponent)(i0.ɵɵdirectiveInject(DOCUMENT));\n};\nFuseFullscreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FuseFullscreenComponent,\n  selectors: [[\"fuse-fullscreen\"]],\n  inputs: {\n    iconTpl: \"iconTpl\",\n    tooltip: \"tooltip\"\n  },\n  exportAs: [\"fuseFullscreen\"],\n  decls: 4,\n  vars: 2,\n  consts: [[\"mat-icon-button\", \"\", 3, \"matTooltip\", \"click\"], [3, \"ngTemplateOutlet\"], [\"defaultIconTpl\", \"\"], [3, \"svgIcon\"]],\n  template: function FuseFullscreenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function FuseFullscreenComponent_Template_button_click_0_listener() {\n        return ctx.toggleFullscreen();\n      });\n      i0.ɵɵelementContainer(1, 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, FuseFullscreenComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(3);\n      i0.ɵɵproperty(\"matTooltip\", ctx.tooltip || \"Toggle Fullscreen\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.iconTpl || _r0);\n    }\n  },\n  dependencies: [i1.MatIconButton, i2.MatIcon, i3.MatTooltip, i4.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\nexport { FuseFullscreenComponent };","map":{"version":3,"names":["DOCUMENT","i0","ɵɵelement","ɵɵproperty","FuseFullscreenComponent","constructor","_document","_isFullscreen","_fsDoc","ngOnInit","_fsDocEl","document","documentElement","toggleFullscreen","_getBrowserFullscreenElement","_closeFullscreen","_openFullscreen","fullscreenElement","mozFullScreenElement","msFullscreenElement","webkitFullscreenElement","Error","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","ɵɵdirectiveInject","selectors","inputs","iconTpl","tooltip","exportAs","decls","vars","consts","template","FuseFullscreenComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","FuseFullscreenComponent_Template_button_click_0_listener","ɵɵelementContainer","ɵɵelementEnd","ɵɵtemplate","FuseFullscreenComponent_ng_template_2_Template","ɵɵtemplateRefExtractor","ɵɵadvance","_r0"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\@fuse\\components\\fullscreen\\fullscreen.component.ts","C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\@fuse\\components\\fullscreen\\fullscreen.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, Component, Inject, Input, OnInit, TemplateRef, ViewEncapsulation } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { FSDocument, FSDocumentElement } from '@fuse/components/fullscreen/fullscreen.types';\r\n\r\n@Component({\r\n    selector       : 'fuse-fullscreen',\r\n    templateUrl    : './fullscreen.component.html',\r\n    encapsulation  : ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    exportAs       : 'fuseFullscreen'\r\n})\r\nexport class FuseFullscreenComponent implements OnInit\r\n{\r\n    @Input() iconTpl: TemplateRef<any>;\r\n    @Input() tooltip: string;\r\n    private _fsDoc: FSDocument;\r\n    private _fsDocEl: FSDocumentElement;\r\n    private _isFullscreen: boolean = false;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(@Inject(DOCUMENT) private _document: Document)\r\n    {\r\n        this._fsDoc = _document as FSDocument;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._fsDocEl = document.documentElement as FSDocumentElement;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Toggle the fullscreen mode\r\n     */\r\n    toggleFullscreen(): void\r\n    {\r\n        // Check if the fullscreen is open\r\n        this._isFullscreen = this._getBrowserFullscreenElement() !== null;\r\n\r\n        // Toggle the fullscreen\r\n        if ( this._isFullscreen )\r\n        {\r\n            this._closeFullscreen();\r\n        }\r\n        else\r\n        {\r\n            this._openFullscreen();\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get browser's fullscreen element\r\n     *\r\n     * @private\r\n     */\r\n    private _getBrowserFullscreenElement(): Element\r\n    {\r\n        if ( typeof this._fsDoc.fullscreenElement !== 'undefined' )\r\n        {\r\n            return this._fsDoc.fullscreenElement;\r\n        }\r\n\r\n        if ( typeof this._fsDoc.mozFullScreenElement !== 'undefined' )\r\n        {\r\n            return this._fsDoc.mozFullScreenElement;\r\n        }\r\n\r\n        if ( typeof this._fsDoc.msFullscreenElement !== 'undefined' )\r\n        {\r\n            return this._fsDoc.msFullscreenElement;\r\n        }\r\n\r\n        if ( typeof this._fsDoc.webkitFullscreenElement !== 'undefined' )\r\n        {\r\n            return this._fsDoc.webkitFullscreenElement;\r\n        }\r\n\r\n        throw new Error('Fullscreen mode is not supported by this browser');\r\n    }\r\n\r\n    /**\r\n     * Open the fullscreen\r\n     *\r\n     * @private\r\n     */\r\n    private _openFullscreen(): void\r\n    {\r\n        if ( this._fsDocEl.requestFullscreen )\r\n        {\r\n            this._fsDocEl.requestFullscreen();\r\n            return;\r\n        }\r\n\r\n        // Firefox\r\n        if ( this._fsDocEl.mozRequestFullScreen )\r\n        {\r\n            this._fsDocEl.mozRequestFullScreen();\r\n            return;\r\n        }\r\n\r\n        // Chrome, Safari and Opera\r\n        if ( this._fsDocEl.webkitRequestFullscreen )\r\n        {\r\n            this._fsDocEl.webkitRequestFullscreen();\r\n            return;\r\n        }\r\n\r\n        // IE/Edge\r\n        if ( this._fsDocEl.msRequestFullscreen )\r\n        {\r\n            this._fsDocEl.msRequestFullscreen();\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close the fullscreen\r\n     *\r\n     * @private\r\n     */\r\n    private _closeFullscreen(): void\r\n    {\r\n        if ( this._fsDoc.exitFullscreen )\r\n        {\r\n            this._fsDoc.exitFullscreen();\r\n            return;\r\n        }\r\n\r\n        // Firefox\r\n        if ( this._fsDoc.mozCancelFullScreen )\r\n        {\r\n            this._fsDoc.mozCancelFullScreen();\r\n            return;\r\n        }\r\n\r\n        // Chrome, Safari and Opera\r\n        if ( this._fsDoc.webkitExitFullscreen )\r\n        {\r\n            this._fsDoc.webkitExitFullscreen();\r\n            return;\r\n        }\r\n\r\n        // IE/Edge\r\n        else if ( this._fsDoc.msExitFullscreen )\r\n        {\r\n            this._fsDoc.msExitFullscreen();\r\n            return;\r\n        }\r\n    }\r\n}\r\n","<!-- Button -->\r\n<button\r\n    mat-icon-button\r\n    [matTooltip]=\"tooltip || 'Toggle Fullscreen'\"\r\n    (click)=\"toggleFullscreen()\">\r\n    <ng-container [ngTemplateOutlet]=\"iconTpl || defaultIconTpl\"></ng-container>\r\n</button>\r\n\r\n<!-- Default icon -->\r\n<ng-template #defaultIconTpl>\r\n    <mat-icon [svgIcon]=\"'heroicons_outline:arrows-expand'\"></mat-icon>\r\n</ng-template>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}