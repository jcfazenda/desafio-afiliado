{"ast":null,"code":"import { from, map } from 'rxjs';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { headers as contactsData, countries as countriesData, tags as tagsData } from '../../../../app/mock-api/apps/contacts/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nclass ContactsMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._contacts = contactsData;\n    this._countries = countriesData;\n    this._tags = tagsData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contacts - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/contacts/all').reply(() => {\n      // Clone the contacts\n      const contacts = cloneDeep(this._contacts);\n      // Sort the contacts by the name field by default\n      contacts.sort((a, b) => a.name.localeCompare(b.name));\n      // Return the response\n      return [200, contacts];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contacts Search - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/contacts/search').reply(({\n      request\n    }) => {\n      // Get the search query\n      const query = request.params.get('query');\n      // Clone the contacts\n      let contacts = cloneDeep(this._contacts);\n      // If the query exists...\n      if (query) {\n        // Filter the contacts\n        contacts = contacts.filter(contact => contact.name && contact.name.toLowerCase().includes(query.toLowerCase()));\n      }\n      // Sort the contacts by the name field by default\n      contacts.sort((a, b) => a.name.localeCompare(b.name));\n      // Return the response\n      return [200, contacts];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contact - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/contacts/contact').reply(({\n      request\n    }) => {\n      // Get the id from the params\n      const id = request.params.get('id');\n      // Clone the contacts\n      const contacts = cloneDeep(this._contacts);\n      // Find the contact\n      const contact = contacts.find(item => item.id === id);\n      // Return the response\n      return [200, contact];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contact - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/contacts/contact').reply(() => {\n      // Generate a new contact\n      const newContact = {\n        id: FuseMockApiUtils.guid(),\n        avatar: null,\n        name: 'New Contact',\n        emails: [],\n        phoneNumbers: [],\n        job: {\n          title: '',\n          company: ''\n        },\n        birthday: null,\n        address: null,\n        notes: null,\n        tags: []\n      };\n      // Unshift the new contact\n      this._contacts.unshift(newContact);\n      // Return the response\n      return [200, newContact];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contact - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/contacts/contact').reply(({\n      request\n    }) => {\n      // Get the id and contact\n      const id = request.body.id;\n      const contact = cloneDeep(request.body.contact);\n      // Prepare the updated contact\n      let updatedContact = null;\n      // Find the contact and update it\n      this._contacts.forEach((item, index, contacts) => {\n        if (item.id === id) {\n          // Update the contact\n          contacts[index] = assign({}, contacts[index], contact);\n          // Store the updated contact\n          updatedContact = contacts[index];\n        }\n      });\n      // Return the response\n      return [200, updatedContact];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Contact - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/contacts/contact').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the contact and delete it\n      this._contacts.forEach((item, index) => {\n        if (item.id === id) {\n          this._contacts.splice(index, 1);\n        }\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Countries - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/contacts/countries').reply(() => [200, cloneDeep(this._countries)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tags - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/apps/contacts/tags').reply(() => [200, cloneDeep(this._tags)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tags - POST\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPost('api/apps/contacts/tag').reply(({\n      request\n    }) => {\n      // Get the tag\n      const newTag = cloneDeep(request.body.tag);\n      // Generate a new GUID\n      newTag.id = FuseMockApiUtils.guid();\n      // Unshift the new tag\n      this._tags.unshift(newTag);\n      // Return the response\n      return [200, newTag];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tags - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/apps/contacts/tag').reply(({\n      request\n    }) => {\n      // Get the id and tag\n      const id = request.body.id;\n      const tag = cloneDeep(request.body.tag);\n      // Prepare the updated tag\n      let updatedTag = null;\n      // Find the tag and update it\n      this._tags.forEach((item, index, tags) => {\n        if (item.id === id) {\n          // Update the tag\n          tags[index] = assign({}, tags[index], tag);\n          // Store the updated tag\n          updatedTag = tags[index];\n        }\n      });\n      // Return the response\n      return [200, updatedTag];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Tag - DELETE\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onDelete('api/apps/contacts/tag').reply(({\n      request\n    }) => {\n      // Get the id\n      const id = request.params.get('id');\n      // Find the tag and delete it\n      this._tags.forEach((item, index) => {\n        if (item.id === id) {\n          this._tags.splice(index, 1);\n        }\n      });\n      // Get the contacts that have the tag\n      const contactsWithTag = this._contacts.filter(contact => contact.tags.indexOf(id) > -1);\n      // Iterate through them and delete the tag\n      contactsWithTag.forEach(contact => {\n        contact.tags.splice(contact.tags.indexOf(id), 1);\n      });\n      // Return the response\n      return [200, true];\n    });\n    // -----------------------------------------------------------------------------------------------------\n    // @ Avatar - POST\n    // -----------------------------------------------------------------------------------------------------\n    /**\n     * Read the given file as mock-api url\n     *\n     * @param file\n     */\n    const readAsDataURL = file =>\n    // Return a new promise\n    new Promise((resolve, reject) => {\n      // Create a new reader\n      const reader = new FileReader();\n      // Resolve the promise on success\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      // Reject the promise on error\n      reader.onerror = e => {\n        reject(e);\n      };\n      // Read the file as the\n      reader.readAsDataURL(file);\n    });\n    this._fuseMockApiService.onPost('api/apps/contacts/avatar').reply(({\n      request\n    }) => {\n      // Get the id and avatar\n      const id = request.body.id;\n      const avatar = request.body.avatar;\n      // Prepare the updated contact\n      let updatedContact = null;\n      // In a real world application, this would return the path\n      // of the saved image file (from host, S3 bucket, etc.) but,\n      // for the sake of the demo, we encode the image to base64\n      // and return it as the new path of the uploaded image since\n      // the src attribute of the img tag works with both image urls\n      // and encoded images.\n      return from(readAsDataURL(avatar)).pipe(map(path => {\n        // Find the contact and update it\n        this._contacts.forEach((item, index, contacts) => {\n          if (item.id === id) {\n            // Update the avatar\n            contacts[index].avatar = path;\n            // Store the updated contact\n            updatedContact = contacts[index];\n          }\n        });\n        // Return the response\n        return [200, updatedContact];\n      }));\n    });\n  }\n  static #_ = this.ɵfac = function ContactsMockApi_Factory(t) {\n    return new (t || ContactsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactsMockApi,\n    factory: ContactsMockApi.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ContactsMockApi };","map":{"version":3,"names":["from","map","assign","cloneDeep","FuseMockApiUtils","headers","contactsData","countries","countriesData","tags","tagsData","ContactsMockApi","constructor","_fuseMockApiService","_contacts","_countries","_tags","registerHandlers","onGet","reply","contacts","sort","a","b","name","localeCompare","request","query","params","get","filter","contact","toLowerCase","includes","id","find","item","onPost","newContact","guid","avatar","emails","phoneNumbers","job","title","company","birthday","address","notes","unshift","onPatch","body","updatedContact","forEach","index","onDelete","splice","newTag","tag","updatedTag","contactsWithTag","indexOf","readAsDataURL","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","e","pipe","path","_","i0","ɵɵinject","i1","FuseMockApiService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\mock-api\\apps\\contacts\\api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { from, map } from 'rxjs';\r\nimport { assign, cloneDeep } from 'lodash-es';\r\nimport { FuseMockApiService, FuseMockApiUtils } from '@fuse/lib/mock-api';\r\nimport { headers as contactsData, countries as countriesData, tags as tagsData } from '../../../../app/mock-api/apps/contacts/data'; \r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ContactsMockApi\r\n{\r\n    private _contacts: any[] = contactsData;\r\n    private _countries: any[] = countriesData;\r\n    private _tags: any[] = tagsData;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _fuseMockApiService: FuseMockApiService)\r\n    {\r\n        // Register Mock API handlers\r\n        this.registerHandlers();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register Mock API handlers\r\n     */\r\n    registerHandlers(): void\r\n    {\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contacts - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/contacts/all')\r\n            .reply(() => {\r\n\r\n                // Clone the contacts\r\n                const contacts = cloneDeep(this._contacts);\r\n\r\n                // Sort the contacts by the name field by default\r\n                contacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n                // Return the response\r\n                return [200, contacts];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contacts Search - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/contacts/search')\r\n            .reply(({request}) => {\r\n\r\n                // Get the search query\r\n                const query = request.params.get('query');\r\n\r\n                // Clone the contacts\r\n                let contacts = cloneDeep(this._contacts);\r\n\r\n                // If the query exists...\r\n                if ( query )\r\n                {\r\n                    // Filter the contacts\r\n                    contacts = contacts.filter(contact => contact.name && contact.name.toLowerCase().includes(query.toLowerCase()));\r\n                }\r\n\r\n                // Sort the contacts by the name field by default\r\n                contacts.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n                // Return the response\r\n                return [200, contacts];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contact - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/contacts/contact')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id from the params\r\n                const id = request.params.get('id');\r\n\r\n                // Clone the contacts\r\n                const contacts = cloneDeep(this._contacts);\r\n\r\n                // Find the contact\r\n                const contact = contacts.find(item => item.id === id);\r\n\r\n                // Return the response\r\n                return [200, contact];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contact - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/apps/contacts/contact')\r\n            .reply(() => {\r\n\r\n                // Generate a new contact\r\n                const newContact = {\r\n                    id          : FuseMockApiUtils.guid(),\r\n                    avatar      : null,\r\n                    name        : 'New Contact',\r\n                    emails      : [],\r\n                    phoneNumbers: [],\r\n                    job         : {\r\n                        title  : '',\r\n                        company: ''\r\n                    },\r\n                    birthday    : null,\r\n                    address     : null,\r\n                    notes       : null,\r\n                    tags        : []\r\n                };\r\n\r\n                // Unshift the new contact\r\n                this._contacts.unshift(newContact);\r\n\r\n                // Return the response\r\n                return [200, newContact];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contact - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/apps/contacts/contact')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and contact\r\n                const id = request.body.id;\r\n                const contact = cloneDeep(request.body.contact);\r\n\r\n                // Prepare the updated contact\r\n                let updatedContact = null;\r\n\r\n                // Find the contact and update it\r\n                this._contacts.forEach((item, index, contacts) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        // Update the contact\r\n                        contacts[index] = assign({}, contacts[index], contact);\r\n\r\n                        // Store the updated contact\r\n                        updatedContact = contacts[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedContact];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Contact - DELETE\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onDelete('api/apps/contacts/contact')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id\r\n                const id = request.params.get('id');\r\n\r\n                // Find the contact and delete it\r\n                this._contacts.forEach((item, index) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        this._contacts.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, true];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Countries - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/contacts/countries')\r\n            .reply(() => [200, cloneDeep(this._countries)]);\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Tags - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/apps/contacts/tags')\r\n            .reply(() => [200, cloneDeep(this._tags)]);\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Tags - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPost('api/apps/contacts/tag')\r\n            .reply(({request}) => {\r\n\r\n                // Get the tag\r\n                const newTag = cloneDeep(request.body.tag);\r\n\r\n                // Generate a new GUID\r\n                newTag.id = FuseMockApiUtils.guid();\r\n\r\n                // Unshift the new tag\r\n                this._tags.unshift(newTag);\r\n\r\n                // Return the response\r\n                return [200, newTag];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Tags - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/apps/contacts/tag')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and tag\r\n                const id = request.body.id;\r\n                const tag = cloneDeep(request.body.tag);\r\n\r\n                // Prepare the updated tag\r\n                let updatedTag = null;\r\n\r\n                // Find the tag and update it\r\n                this._tags.forEach((item, index, tags) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        // Update the tag\r\n                        tags[index] = assign({}, tags[index], tag);\r\n\r\n                        // Store the updated tag\r\n                        updatedTag = tags[index];\r\n                    }\r\n                });\r\n\r\n                // Return the response\r\n                return [200, updatedTag];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Tag - DELETE\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onDelete('api/apps/contacts/tag')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id\r\n                const id = request.params.get('id');\r\n\r\n                // Find the tag and delete it\r\n                this._tags.forEach((item, index) => {\r\n\r\n                    if ( item.id === id )\r\n                    {\r\n                        this._tags.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                // Get the contacts that have the tag\r\n                const contactsWithTag = this._contacts.filter(contact => contact.tags.indexOf(id) > -1);\r\n\r\n                // Iterate through them and delete the tag\r\n                contactsWithTag.forEach((contact) => {\r\n                    contact.tags.splice(contact.tags.indexOf(id), 1);\r\n                });\r\n\r\n                // Return the response\r\n                return [200, true];\r\n            });\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ Avatar - POST\r\n        // -----------------------------------------------------------------------------------------------------\r\n\r\n        /**\r\n         * Read the given file as mock-api url\r\n         *\r\n         * @param file\r\n         */\r\n        const readAsDataURL = (file: File): Promise<any> =>\r\n\r\n            // Return a new promise\r\n            new Promise((resolve, reject) => {\r\n\r\n                // Create a new reader\r\n                const reader = new FileReader();\r\n\r\n                // Resolve the promise on success\r\n                reader.onload = (): void => {\r\n                    resolve(reader.result);\r\n                };\r\n\r\n                // Reject the promise on error\r\n                reader.onerror = (e): void => {\r\n                    reject(e);\r\n                };\r\n\r\n                // Read the file as the\r\n                reader.readAsDataURL(file);\r\n            })\r\n        ;\r\n\r\n        this._fuseMockApiService\r\n            .onPost('api/apps/contacts/avatar')\r\n            .reply(({request}) => {\r\n\r\n                // Get the id and avatar\r\n                const id = request.body.id;\r\n                const avatar = request.body.avatar;\r\n\r\n                // Prepare the updated contact\r\n                let updatedContact: any = null;\r\n\r\n                // In a real world application, this would return the path\r\n                // of the saved image file (from host, S3 bucket, etc.) but,\r\n                // for the sake of the demo, we encode the image to base64\r\n                // and return it as the new path of the uploaded image since\r\n                // the src attribute of the img tag works with both image urls\r\n                // and encoded images.\r\n                return from(readAsDataURL(avatar)).pipe(\r\n                    map((path) => {\r\n\r\n                        // Find the contact and update it\r\n                        this._contacts.forEach((item, index, contacts) => {\r\n\r\n                            if ( item.id === id )\r\n                            {\r\n                                // Update the avatar\r\n                                contacts[index].avatar = path;\r\n\r\n                                // Store the updated contact\r\n                                updatedContact = contacts[index];\r\n                            }\r\n                        });\r\n\r\n                        // Return the response\r\n                        return [200, updatedContact];\r\n                    })\r\n                );\r\n            });\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}