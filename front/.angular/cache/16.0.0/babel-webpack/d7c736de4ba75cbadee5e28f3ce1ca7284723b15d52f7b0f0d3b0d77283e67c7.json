{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { user as userData } from 'app/mock-api/common/user/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nclass UserMockApi {\n  /**\n   * Constructor\n   */\n  constructor(_fuseMockApiService) {\n    this._fuseMockApiService = _fuseMockApiService;\n    this._user = userData;\n    // Register Mock API handlers\n    this.registerHandlers();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Register Mock API handlers\n   */\n  registerHandlers() {\n    // -----------------------------------------------------------------------------------------------------\n    // @ User - GET\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onGet('api/common/user').reply(() => [200, cloneDeep(this._user)]);\n    // -----------------------------------------------------------------------------------------------------\n    // @ User - PATCH\n    // -----------------------------------------------------------------------------------------------------\n    this._fuseMockApiService.onPatch('api/common/user').reply(({\n      request\n    }) => {\n      // Get the user mock-api\n      const user = cloneDeep(request.body.user);\n      // Update the user mock-api\n      this._user = assign({}, this._user, user);\n      // Return the response\n      return [200, cloneDeep(this._user)];\n    });\n  }\n}\nUserMockApi.ɵfac = function UserMockApi_Factory(t) {\n  return new (t || UserMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n};\nUserMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserMockApi,\n  factory: UserMockApi.ɵfac,\n  providedIn: 'root'\n});\nexport { UserMockApi };","map":{"version":3,"names":["assign","cloneDeep","user","userData","UserMockApi","constructor","_fuseMockApiService","_user","registerHandlers","onGet","reply","onPatch","request","body","i0","ɵɵinject","i1","FuseMockApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\OneDrive\\Área de Trabalho\\projects\\payments\\iso\\src\\app\\mock-api\\common\\user\\api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { assign, cloneDeep } from 'lodash-es';\r\nimport { FuseMockApiService } from '@fuse/lib/mock-api';\r\nimport { user as userData } from 'app/mock-api/common/user/data';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserMockApi\r\n{\r\n    private _user: any = userData;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(private _fuseMockApiService: FuseMockApiService)\r\n    {\r\n        // Register Mock API handlers\r\n        this.registerHandlers();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Register Mock API handlers\r\n     */\r\n    registerHandlers(): void\r\n    {\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ User - GET\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onGet('api/common/user')\r\n            .reply(() => [200, cloneDeep(this._user)]);\r\n\r\n        // -----------------------------------------------------------------------------------------------------\r\n        // @ User - PATCH\r\n        // -----------------------------------------------------------------------------------------------------\r\n        this._fuseMockApiService\r\n            .onPatch('api/common/user')\r\n            .reply(({request}) => {\r\n\r\n                // Get the user mock-api\r\n                const user = cloneDeep(request.body.user);\r\n\r\n                // Update the user mock-api\r\n                this._user = assign({}, this._user, user);\r\n\r\n                // Return the response\r\n                return [200, cloneDeep(this._user)];\r\n            });\r\n    }\r\n}\r\n"],"mappings":"AACA,SAASA,MAAM,EAAEC,SAAS,QAAQ,WAAW;AAE7C,SAASC,IAAI,IAAIC,QAAQ,QAAQ,+BAA+B;;;AAEhE,MAGaC,WAAW;EAIpB;;;EAGAC,YAAoBC,mBAAuC;IAAvC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAL/B,KAAAC,KAAK,GAAQJ,QAAQ;IAOzB;IACA,IAAI,CAACK,gBAAgB,EAAE;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGAA,gBAAgBA,CAAA;IAEZ;IACA;IACA;IACA,IAAI,CAACF,mBAAmB,CACnBG,KAAK,CAAC,iBAAiB,CAAC,CACxBC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAET,SAAS,CAAC,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC;IAE9C;IACA;IACA;IACA,IAAI,CAACD,mBAAmB,CACnBK,OAAO,CAAC,iBAAiB,CAAC,CAC1BD,KAAK,CAAC,CAAC;MAACE;IAAO,CAAC,KAAI;MAEjB;MACA,MAAMV,IAAI,GAAGD,SAAS,CAACW,OAAO,CAACC,IAAI,CAACX,IAAI,CAAC;MAEzC;MACA,IAAI,CAACK,KAAK,GAAGP,MAAM,CAAC,EAAE,EAAE,IAAI,CAACO,KAAK,EAAEL,IAAI,CAAC;MAEzC;MACA,OAAO,CAAC,GAAG,EAAED,SAAS,CAAC,IAAI,CAACM,KAAK,CAAC,CAAC;IACvC,CAAC,CAAC;EACV;;AA7CSH,WAAW,C;mBAAXA,WAAW,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;AAAA;AAAXb,WAAW,C;SAAXA,WAAW;EAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEThB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}