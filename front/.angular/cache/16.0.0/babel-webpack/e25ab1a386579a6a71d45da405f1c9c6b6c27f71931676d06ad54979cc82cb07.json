{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/layout/common/messages/messages.service\";\nimport * as i2 from \"app/core/navigation/navigation.service\";\nimport * as i3 from \"app/layout/common/notifications/notifications.service\";\nimport * as i4 from \"app/layout/common/quick-chat/quick-chat.service\";\nimport * as i5 from \"app/layout/common/shortcuts/shortcuts.service\";\nclass InitialDataResolver {\n  /**\n   * Constructor\n   */\n  constructor(_messagesService, _navigationService, _notificationsService, _quickChatService, _shortcutsService) {\n    this._messagesService = _messagesService;\n    this._navigationService = _navigationService;\n    this._notificationsService = _notificationsService;\n    this._quickChatService = _quickChatService;\n    this._shortcutsService = _shortcutsService;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\n   * Use this resolver to resolve initial mock-api for the application\n   *\n   * @param route\n   * @param state\n   */\n  resolve(route, state) {\n    // Fork join multiple API endpoint calls to wait all of them to finish\n    return forkJoin([this._navigationService.get(), this._messagesService.getAll(), this._notificationsService.getAll(), this._quickChatService.getChats(), this._shortcutsService.getAll()]);\n  }\n  static #_ = this.ɵfac = function InitialDataResolver_Factory(t) {\n    return new (t || InitialDataResolver)(i0.ɵɵinject(i1.MessagesService), i0.ɵɵinject(i2.NavigationService), i0.ɵɵinject(i3.NotificationsService), i0.ɵɵinject(i4.QuickChatService), i0.ɵɵinject(i5.ShortcutsService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InitialDataResolver,\n    factory: InitialDataResolver.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { InitialDataResolver };","map":{"version":3,"names":["forkJoin","InitialDataResolver","constructor","_messagesService","_navigationService","_notificationsService","_quickChatService","_shortcutsService","resolve","route","state","get","getAll","getChats","_","i0","ɵɵinject","i1","MessagesService","i2","NavigationService","i3","NotificationsService","i4","QuickChatService","i5","ShortcutsService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcfaz\\Downloads\\Projects\\desafio-afiliado\\front\\src\\app\\app.resolvers.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport { MessagesService } from 'app/layout/common/messages/messages.service';\r\nimport { NavigationService } from 'app/core/navigation/navigation.service';\r\nimport { NotificationsService } from 'app/layout/common/notifications/notifications.service';\r\nimport { QuickChatService } from 'app/layout/common/quick-chat/quick-chat.service';\r\nimport { ShortcutsService } from 'app/layout/common/shortcuts/shortcuts.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class InitialDataResolver implements Resolve<any>\r\n{\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _messagesService: MessagesService,\r\n        private _navigationService: NavigationService,\r\n        private _notificationsService: NotificationsService,\r\n        private _quickChatService: QuickChatService,\r\n        private _shortcutsService: ShortcutsService\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Use this resolver to resolve initial mock-api for the application\r\n     *\r\n     * @param route\r\n     * @param state\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any>\r\n    {\r\n        // Fork join multiple API endpoint calls to wait all of them to finish\r\n        return forkJoin([\r\n            this._navigationService.get(),\r\n            this._messagesService.getAll(),\r\n            this._notificationsService.getAll(),\r\n            this._quickChatService.getChats(),\r\n            this._shortcutsService.getAll()\r\n        ]);\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAASA,QAAQ,QAAoB,MAAM;;;;;;;AAO3C,MAGaC,mBAAmB;EAE5B;;;EAGAC,YACYC,gBAAiC,EACjCC,kBAAqC,EACrCC,qBAA2C,EAC3CC,iBAAmC,EACnCC,iBAAmC;IAJnC,KAAAJ,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAClB,KAAAC,qBAAqB,GAArBA,qBAAqB;IACrB,KAAAC,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,iBAAiB,GAAjBA,iBAAiB;EAG7B;EAEA;EACA;EACA;EAEA;;;;;;EAMAC,OAAOA,CAACC,KAA6B,EAAEC,KAA0B;IAE7D;IACA,OAAOV,QAAQ,CAAC,CACZ,IAAI,CAACI,kBAAkB,CAACO,GAAG,EAAE,EAC7B,IAAI,CAACR,gBAAgB,CAACS,MAAM,EAAE,EAC9B,IAAI,CAACP,qBAAqB,CAACO,MAAM,EAAE,EACnC,IAAI,CAACN,iBAAiB,CAACO,QAAQ,EAAE,EACjC,IAAI,CAACN,iBAAiB,CAACK,MAAM,EAAE,CAClC,CAAC;EACN;EAAC,QAAAE,CAAA,G;qBAnCQb,mBAAmB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,oBAAA,GAAAP,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,gBAAA,GAAAT,EAAA,CAAAC,QAAA,CAAAS,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB1B,mBAAmB;IAAA2B,OAAA,EAAnB3B,mBAAmB,CAAA4B,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAET7B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}